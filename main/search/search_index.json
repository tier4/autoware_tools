{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"autoware_tools","text":""},{"location":"#autoware_tools","title":"autoware_tools","text":"<p>This is a repository for keeping packages that are not needed at runtime, including packages for benchmarking, debugging, tuning, calibrating, etc.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@autoware.org. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>See https://autowarefoundation.github.io/autoware-documentation/main/contributing/.</p>"},{"location":"DISCLAIMER/","title":"DISCLAIMER","text":"<p>DISCLAIMER</p> <p>\u201cAutoware\u201d will be provided by The Autoware Foundation under the Apache License 2.0. This \u201cDISCLAIMER\u201d will be applied to all users of Autoware (a \u201cUser\u201d or \u201cUsers\u201d) with the Apache License 2.0 and Users shall hereby approve and acknowledge all the contents specified in this disclaimer below and will be deemed to consent to this disclaimer without any objection upon utilizing or downloading Autoware.</p> <p>Disclaimer and Waiver of Warranties</p> <ol> <li> <p>AUTOWARE FOUNDATION MAKES NO REPRESENTATION OR WARRANTY OF ANY KIND,    EXPRESS OR IMPLIED, WITH RESPECT TO PROVIDING AUTOWARE (the \u201cService\u201d)    including but not limited to any representation or warranty (i) of fitness or    suitability for a particular purpose contemplated by the Users, (ii) of the    expected functions, commercial value, accuracy, or usefulness of the Service,    (iii) that the use by the Users of the Service complies with the laws and    regulations applicable to the Users or any internal rules established by    industrial organizations, (iv) that the Service will be free of interruption or    defects, (v) of the non-infringement of any third party's right and (vi) the    accuracy of the content of the Services and the software itself.</p> </li> <li> <p>The Autoware Foundation shall not be liable for any damage incurred by the    User that are attributable to the Autoware Foundation for any reasons    whatsoever. UNDER NO CIRCUMSTANCES SHALL THE AUTOWARE FOUNDATION BE LIABLE FOR    INCIDENTAL, INDIRECT, SPECIAL OR FUTURE DAMAGES OR LOSS OF PROFITS.</p> </li> <li> <p>A User shall be entirely responsible for the content posted by the User and    its use of any content of the Service or the Website. If the User is held    responsible in a civil action such as a claim for damages or even in a criminal    case, the Autoware Foundation and member companies, governments and academic &amp;    non-profit organizations and their directors, officers, employees and agents    (collectively, the \u201cIndemnified Parties\u201d) shall be completely discharged from    any rights or assertions the User may have against the Indemnified Parties, or    from any legal action, litigation or similar procedures.</p> </li> </ol> <p>Indemnity</p> <p>A User shall indemnify and hold the Indemnified Parties harmless from any of their damages, losses, liabilities, costs or expenses (including attorneys' fees or criminal compensation), or any claims or demands made against the Indemnified Parties by any third party, due to or arising out of, or in connection with utilizing Autoware (including the representations and warranties), the violation of applicable Product Liability Law of each country (including criminal case) or violation of any applicable laws by the Users, or the content posted by the User or its use of any content of the Service or the Website.</p>"},{"location":"autoware_dependency_checker/","title":"autoware_dependency_checker","text":""},{"location":"autoware_dependency_checker/#autoware_dependency_checker","title":"autoware_dependency_checker","text":"<p>This package provides a script for checking whether each package's dependencies listed in a package.xml are used or not. Currently, it mainly checks packages that start with <code>autoware_</code>.</p>"},{"location":"autoware_dependency_checker/#dependency-checking","title":"Dependency Checking","text":"<p>The script will try to match the dependencies and the headers by reading the dependencies listed in package.xml and the included headers in the source files.</p> <p>Some dependency in <code>package.xml</code> and the included header might differ. The following table shows the matching between dependency names and headers:</p> from to description autoware_pkg_name autoware/pkg_name Usually this style should be used autoware_*_msgs autoware_*_msgs For messages autoware_other_pkg autoware_other_pkg E.g. autoware_lanelet2_extension"},{"location":"autoware_dependency_checker/#usage","title":"Usage","text":"<pre><code># build\n$ cd to/autoware_tools\n$ colcon build --symlink-install --cmake-args --packages-up-to autoware_dependency_checker\n$ source\n\n# run\n$ cd to/your/autoware\n$ ros2 run autoware_dependency_checker dependency_checker.sh\n\n# run in some package\n$ cd to/some/package\n$ ros2 run autoware_dependency_checker dependency_checker.sh\n</code></pre>"},{"location":"bag2lanelet/","title":"bag2lanelet","text":""},{"location":"bag2lanelet/#bag2lanelet","title":"bag2lanelet","text":"<p>This package generates a lanelet map necessary for Autoware's autonomous driving from rosbag data containing information about Localization (<code>/tf</code>). This enables autonomous driving based on manual driving information.</p> <p>The provided functionalities are as follows:</p> <ul> <li>bag2lanelet.py: Generates lanelet (.osm) from a rosbag based on the position of <code>base_link</code>.</li> <li>bag2trajectory.py: Generates trajectory information (.csv) for vector_map_builder from a rosbag.</li> </ul>"},{"location":"bag2lanelet/#example","title":"Example","text":"<p>As an example, the process of lanelet generation based on driving trajectories from the planning simulator is performed as follows. Typically, the expectation is to use rosbag data from manual driving, rather than from the planning simulator.</p> <p>Firstly, you need to run the planning_simulator following the planning_simulator tutorial in Autoware Documentation. The process would be, install Autoware, download the maps, run the planning_simulator, and start autonomous driving. Make sure to save the rosbag during this driving session using the following command:</p> <pre><code>ros2 bag record /tf -o /tmp/bag2lanelet_sample.bag\n</code></pre> <p> </p> <p>After completing the drive, you can run the <code>bag2lanelet.py</code> script. This requires specifying the output directory, lane width and MGRS coordinates:</p> <pre><code>./bag2lanelet.py /tmp/bag2lanelet_sample.bag /tmp/bag2lanelet_sample -l 3.0 -m 54SUE\n</code></pre> <p>The map will be saved in the specified directory, following the naming convention <code>&lt;date&gt;-lanelet2_map.osm</code>. The map generated will appear like this. You can see the example result in ./example/lanelet2_map.osm.</p> <p>When you relaunch the planning_simulator with the new lanelet2 map, you will see the following.</p> <p> </p> <p>Please note that at this stage, although this map works with Autoware, the shape of the lanes will appear jagged. (Refer to the 'Limitations' section for more details.) While this is an issue that should be addressed in the future, it can currently be resolved by loading it in Vector Map Builder as follows.</p> <p>Following the documentation of the Vector Map Builder, import the generated Lanelet2 map. You can see the refined lane on the application.</p> <p> </p> <p>Then, Export the map. You can run the planning_simulator with the refined lanelet2 map and see how it goes on the Rviz.</p> <p> </p>"},{"location":"bag2lanelet/#requirements","title":"Requirements","text":"<pre><code>sudo apt update\nsudo apt install ros-humble-tf-transformations ros-humble-tf-transformations\npip install -r requirements.txt\n</code></pre>"},{"location":"bag2lanelet/#usage","title":"Usage","text":"<p>Check <code>./bag2lanelet.py --help</code></p>"},{"location":"bag2lanelet/#generate-lanelet2-file","title":"generate lanelet2 file","text":"<p>For given lane width and MGRS coordinate.</p> <pre><code>./bag2lanelet.py /home/autoware/rosbag/sample .  -l 3.0 -m 54SUE\n</code></pre>"},{"location":"bag2lanelet/#generate-trajectory-file-for-vector-map-builder","title":"generate trajectory file for Vector Map Builder","text":"<pre><code>./bag2trajectory.py /home/autoware/rosbag/sample sample.csv\n</code></pre>"},{"location":"bag2lanelet/#limitations","title":"Limitations","text":"<p>Here is the limitations of this package. Contributions to further improvements are more than welcome.</p> <ul> <li>Due to the low conversion accuracy from MGRS to latitude and longitude in this script, the lanes in the output lanelet.osm appear jagged. Importing and then exporting through vector_map_builder corrects these values with high accuracy.</li> </ul>"},{"location":"common/autoware_debug_tools/","title":"Autoware Debug Tools","text":""},{"location":"common/autoware_debug_tools/#autoware-debug-tools","title":"Autoware Debug Tools","text":"<p>This package provides tools for debugging Autoware.</p>"},{"location":"common/autoware_debug_tools/#processing-time-visualizer","title":"Processing Time Visualizer","text":"<p>This tool visualizes <code>tier4_debug_msgs/msg/ProcessingTimeTree</code> messages.</p>"},{"location":"common/autoware_debug_tools/#usage","title":"Usage","text":"<ol> <li> <p>Run the following command to start the visualizer.</p> <pre><code>ros2 run autoware_debug_tools processing_time_visualizer\n</code></pre> </li> <li> <p>Select a topic to visualize.</p> <p></p> </li> <li> <p>Then, the visualizer will show the processing time tree.</p> <p></p> </li> </ol>"},{"location":"common/autoware_debug_tools/#summarized-output","title":"summarized output","text":"<p>Running with <code>--summarize</code>, it will output the summarized information.</p> <pre><code>&gt; ros2 run autoware_debug_tools processing_time_visualizer --summarize\n\nobjectsCallback: 17.99 [ms], run count: 1\n    \u251c\u2500\u2500 removeStaleTrafficLightInfo: 0.00 [ms], run count: 1\n    \u251c\u2500\u2500 updateObjectData: 0.03 [ms], run count: 13\n    \u251c\u2500\u2500 getCurrentLanelets: 4.81 [ms], run count: 13\n    \u2502   \u251c\u2500\u2500 checkCloseLaneletCondition: 2.43 [ms], run count: 130\n    \u2502   \u251c\u2500\u2500 isDuplicated: 0.02 [ms], run count: 17\n    \u2502   \u2514\u2500\u2500 calculateLocalLikelihood: 0.66 [ms], run count: 12\n    \u251c\u2500\u2500 updateRoadUsersHistory: 0.30 [ms], run count: 13\n    \u2514\u2500\u2500 getPredictedReferencePath: 5.47 [ms], run count: 5\n        \u251c\u2500\u2500 predictObjectManeuver: 0.40 [ms], run count: 5\n        \u2502   \u2514\u2500\u2500 predictObjectManeuverByLatDiffDistance: 0.34 [ms], run count: 5\n        \u2502       \u2514\u2500\u2500 calcRightLateralOffset: 0.03 [ms], run count: 12\n        \u251c\u2500\u2500 calculateManeuverProbability: 0.01 [ms], run count: 5\n        \u2514\u2500\u2500 addReferencePaths: 4.66 [ms], run count: 15\n            \u251c\u2500\u2500 updateFuturePossibleLanelets: 0.08 [ms], run count: 8\n            \u2514\u2500\u2500 convertPathType: 4.29 [ms], run count: 8\n</code></pre>"},{"location":"common/autoware_debug_tools/#system-usage-monitor","title":"System Usage Monitor","text":"<p>The purpose of the System Usage Monitor is to monitor, visualize and publish the CPU usage and memory usage of the ROS processes. By providing a real-time terminal-based visualization, users can easily confirm the cpu and memory usage as in the picture below.</p> <p></p> <p>You can run the program by the following command.</p> <pre><code>ros2 run autoware_debug_tools system_usage_monitor\n</code></pre>"},{"location":"common/autoware_debug_tools/#system-performance-plotter","title":"System Performance Plotter","text":"<p>This script plots the following metrics by each Autoware's module.</p> <ul> <li>processing time</li> <li>CPU usage</li> <li>memory usage</li> </ul>"},{"location":"common/autoware_debug_tools/#usage_1","title":"Usage","text":"<p>Run the following commands according to your purpose.</p> <pre><code># plot processing time\nros2 run autoware_debug_tools processing_time_plotter &lt;bag-path&gt;\n\n# plot CPU usage\nros2 run autoware_debug_tools cpu_usage_plotter &lt;bag-path&gt;\n\n# plot memory usage\nros2 run autoware_debug_tools memory_usage_plotter &lt;bag-path&gt;\n</code></pre> <p>There are several options.</p> <ul> <li><code>-c</code>:<ul> <li>can filter modules in the specific component (e.g. <code>all</code>, <code>planning</code>, <code>system</code>, etc).</li> </ul> </li> <li><code>-n &lt;number&gt;</code>:<ul> <li>can pick up top <code>&lt;number&gt;</code> critical modules.</li> </ul> </li> <li><code>-g &lt;text&gt;</code><ul> <li>can filter the modules which include <code>&lt;text&gt;</code>.</li> </ul> </li> <li><code>-y &lt;val&gt;</code><ul> <li>can set the height of the plot to <code>&lt;val&gt;</code>.</li> </ul> </li> </ul>"},{"location":"common/autoware_debug_tools/#examples","title":"Examples","text":"<pre><code>ros2 run autoware_debug_tools processing_time_plotter &lt;bag-path&gt; -c planning -g behavior_path -y 300\n</code></pre> <pre><code>ros2 run autoware_debug_tools cpu_usage_plotter &lt;bag-path&gt; -n 20\n</code></pre>"},{"location":"common/autoware_debug_tools/#rosout-log-reconstructor","title":"Rosout Log Reconstructor","text":"<p>This script shows the log from the <code>/rosout</code> topic on the terminal.</p>"},{"location":"common/autoware_debug_tools/#usage_2","title":"Usage","text":"<pre><code>ros2 run autoware_debug_tools rosout_log_reconstructor\n</code></pre>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/","title":"Topic Connection Checker","text":""},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#topic-connection-checker","title":"Topic Connection Checker","text":"<p>The Topic Connection Checker is an advanced diagnostic tool designed to simulate how an Autoware Engineer debugs an Autoware system in the field when certain topics are not functioning as expected. This tool is essential for identifying and resolving issues in the complex topic network of an Autoware system.</p>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#overview","title":"Overview","text":"<p>The tool consists of two main components:</p> <ol> <li>Topic Connection Checker</li> <li>Topic Localizer</li> </ol> <p>These components work together to provide a comprehensive debugging experience, following a systematic approach to identify and locate problematic topics in the Autoware system.</p>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#debugging-process","title":"Debugging Process","text":"<p>The Topic Connection Checker follows a step-by-step process that mimics an experienced Autoware Engineer's debugging approach:</p> <ol> <li>Identify key topics with unexpected output using diagnostic information and major final output topics.</li> <li>Track the publishing nodes of these blocked output topics.</li> <li>Investigate the subscribed inputs of these publishing nodes to find upstream blocked topics.</li> <li>Trace back to the source to identify key topics that are not being published.</li> <li>Locate the source of lost topics in the code or launching system.</li> </ol> <p>Steps 1-4 are handled by the Topic Connection Checker, while step 5 is addressed by the Topic Localizer.</p>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#topic-connection-checker_1","title":"Topic Connection Checker","text":""},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#usage","title":"Usage","text":"<p>To run the Topic Connection Checker, use the following command:</p> <pre><code>ros2 run autoware_debug_tools topic_connection_checker\n</code></pre>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#mechanism","title":"Mechanism","text":"<p>The Topic Connection Checker operates as follows:</p> <ol> <li>Subscribes to <code>/diagnostics</code> for three seconds, focusing on <code>hardware_id</code> with <code>topic_state_monitor</code>.</li> <li>Subscribes to and traces stuck topics and all upstream topics.</li> <li>Performs multiple iterations to identify topics without publishers.</li> <li>Reports ERROR in the command line for problematic topics.</li> </ol> <p>The identified problematic topics can then be used as input for the Topic Localizer.</p>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#topic-localizer","title":"Topic Localizer","text":""},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#usage_1","title":"Usage","text":"<p>When launching from the <code>autoware/pilot-auto</code> directory, use the following command:</p> <pre><code>ros2 run autoware_debug_tools topic_localizer . $TOPIC1,$TOPIC2\n\n## If we launch from a different directory\nros2 run autoware_debug_tools topic_localizer $AUTOWARE_DIRECTORY $TOPIC1,$TOPIC2\n</code></pre> <p>Replace <code>$TOPIC1,$TOPIC2</code> with the actual topic names you want to localize, separated by commas.</p>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#mechanism_1","title":"Mechanism","text":"<p>The Topic Localizer employs a two-step approach to find the source of problematic topics:</p> <ol> <li> <p>Direct Search:</p> <ul> <li>Scans all HPP/CPP and launch.py files for code snippets containing the exact names of the target topics.</li> </ul> </li> <li> <p>Launch System Analysis:</p> <ul> <li>Starts with <code>autoware_launch/launch/autoware.launch.xml</code> using default arguments.</li> <li>Statically traces all XML files in the launch system.</li> <li>Identifies launch parameters or remapped topics matching the names of the target topics.</li> </ul> </li> </ol>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#best-practices","title":"Best Practices","text":"<ol> <li>Always start with the Topic Connection Checker to identify problematic topics.</li> <li>Use the output from the Topic Connection Checker as input for the Topic Localizer.</li> <li>Pay attention to ERROR messages in the command line output.</li> <li>When using the Topic Localizer, ensure you're in the correct directory (autoware/pilot-auto).</li> <li>Keep track of the relationships between topics to understand the flow of data in your Autoware system.</li> </ol>"},{"location":"common/autoware_debug_tools/autoware_debug_tools/topic_connection_checker/readme/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the Topic Connection Checker doesn't identify any issues, but you're still experiencing problems, it could be related to the pulishing frequencies. The connection checker marks a topic as \"fine\" if it has a single output in five seconds.</li> <li>If the Topic Localizer doesn't find any matches, it is usually because of the topics are launch using launch.py files with sophisticated construction functions.</li> </ul> <p>By using these tools effectively, Autoware Engineers can quickly identify and resolve topic-related issues, ensuring smooth operation of the Autoware system.</p>"},{"location":"common/mission_planner_rviz_plugin/","title":"mission_planner_rviz_plugin","text":""},{"location":"common/mission_planner_rviz_plugin/#mission_planner_rviz_plugin","title":"mission_planner_rviz_plugin","text":""},{"location":"common/mission_planner_rviz_plugin/#mrmgoaltool","title":"MrmGoalTool","text":"<p>This is a copy of <code>rviz_default_plugins::tools::GoalTool</code>. Used together with the RouteSelectorPanel to set the MRM route. After adding the tool, change the topic name to <code>/rviz/route_selector/mrm/goal</code> from the topic property panel in rviz.</p>"},{"location":"common/mission_planner_rviz_plugin/#routeselectorpanel","title":"RouteSelectorPanel","text":"<p>This panel shows the main and mrm route state in the route_selector and the route states in the mission_planner. Additionally, it provides clear and set functions for each main route and mrm route.</p> Trigger Action main route clear button call <code>/planning/mission_planning/route_selector/main/clear_route</code> mrm route clear button call <code>/planning/mission_planning/route_selector/mrm/clear_route</code> <code>/rviz/route_selector/main/goal</code> topic call <code>/planning/mission_planning/route_selector/main/set_waypoint_route</code> <code>/rviz/route_selector/mrm/goal</code> topic call <code>/planning/mission_planning/route_selector/mrm/set_waypoint_route</code>"},{"location":"common/rtc_manager_rviz_plugin/","title":"rtc_manager_rviz_plugin","text":""},{"location":"common/rtc_manager_rviz_plugin/#rtc_manager_rviz_plugin","title":"rtc_manager_rviz_plugin","text":""},{"location":"common/rtc_manager_rviz_plugin/#purpose","title":"Purpose","text":"<p>The purpose of this Rviz plugin is</p> <ol> <li> <p>To display each content of RTC status.</p> </li> <li> <p>To switch each module of RTC auto mode.</p> </li> <li> <p>To change RTC cooperate commands by button.</p> </li> </ol> <p></p>"},{"location":"common/rtc_manager_rviz_plugin/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"common/rtc_manager_rviz_plugin/#input","title":"Input","text":"Name Type Description <code>/api/external/get/rtc_status</code> <code>tier4_rtc_msgs::msg::CooperateStatusArray</code> The statuses of each Cooperate Commands"},{"location":"common/rtc_manager_rviz_plugin/#output","title":"Output","text":"Name Type Description <code>/api/external/set/rtc_commands</code> <code>tier4_rtc_msgs::src::CooperateCommands</code> The Cooperate Commands for each planning <code>/planning/enable_auto_mode/*</code> <code>tier4_rtc_msgs::src::AutoMode</code> The Cooperate Commands mode for each planning module"},{"location":"common/rtc_manager_rviz_plugin/#howtouse","title":"HowToUse","text":"<ol> <li> <p>Start rviz and select panels/Add new panel.    </p> </li> <li> <p>tier4_state_rviz_plugin/RTCManagerPanel and press OK.    </p> </li> </ol>"},{"location":"common/tier4_automatic_goal_rviz_plugin/","title":"tier4_automatic_goal_rviz_plugin","text":""},{"location":"common/tier4_automatic_goal_rviz_plugin/#tier4_automatic_goal_rviz_plugin","title":"tier4_automatic_goal_rviz_plugin","text":""},{"location":"common/tier4_automatic_goal_rviz_plugin/#purpose","title":"Purpose","text":"<ol> <li> <p>Defining a <code>GoalsList</code> by adding goals using <code>RvizTool</code> (Pose on the map).</p> </li> <li> <p>Automatic execution of the created <code>GoalsList</code> from the selected goal - it can be stopped and restarted.</p> </li> <li> <p>Looping the current <code>GoalsList</code>.</p> </li> <li> <p>Saving achieved goals to a file.</p> </li> <li> <p>Plan the route to one (single) selected goal and starting that route - it can be stopped and restarted.</p> </li> <li> <p>Remove any goal from the list or clear the current route.</p> </li> <li> <p>Save the current <code>GoalsList</code> to a file and load the list from the file.</p> </li> <li> <p>The application enables/disables access to options depending on the current state.</p> </li> <li> <p>The saved <code>GoalsList</code> can be executed without using a plugin - using a node <code>automatic_goal_sender</code>.</p> </li> </ol>"},{"location":"common/tier4_automatic_goal_rviz_plugin/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"common/tier4_automatic_goal_rviz_plugin/#input","title":"Input","text":"Name Type Description <code>/api/operation_mode/state</code> <code>autoware_adapi_v1_msgs::msg::OperationModeState</code> The topic represents the state of operation mode <code>/api/routing/state</code> <code>autoware_adapi_v1_msgs::msg::RouteState</code> The topic represents the state of route <code>/rviz2/automatic_goal/goal</code> <code>geometry_msgs::msgs::PoseStamped</code> The topic for adding goals to GoalsList"},{"location":"common/tier4_automatic_goal_rviz_plugin/#output","title":"Output","text":"Name Type Description <code>/api/operation_mode/change_to_autonomous</code> <code>autoware_adapi_v1_msgs::srv::ChangeOperationMode</code> The service to change operation mode to autonomous <code>/api/operation_mode/change_to_stop</code> <code>autoware_adapi_v1_msgs::srv::ChangeOperationMode</code> The service to change operation mode to stop <code>/api/routing/set_route_points</code> <code>autoware_adapi_v1_msgs::srv::SetRoutePoints</code> The service to set route <code>/api/routing/clear_route</code> <code>autoware_adapi_v1_msgs::srv::ClearRoute</code> The service to clear route state <code>/rviz2/automatic_goal/markers</code> <code>visualization_msgs::msg::MarkerArray</code> The topic to visualize goals as rviz markers"},{"location":"common/tier4_automatic_goal_rviz_plugin/#howtouse","title":"HowToUse","text":"<ol> <li> <p>Start rviz and select panels/Add new panel.</p> <p></p> </li> <li> <p>Select <code>tier4_automatic_goal_rviz_plugin/AutowareAutomaticGoalPanel</code> and press OK.</p> </li> <li> <p>Select Add a new tool.</p> <p></p> </li> <li> <p>Select <code>tier4_automatic_goal_rviz_plugin/AutowareAutomaticGoalTool</code> and press OK.</p> </li> <li> <p>Add goals visualization as markers to <code>Displays</code>.</p> <p></p> </li> <li> <p>Append goals to the <code>GoalsList</code> to be achieved using <code>2D Append Goal</code> - in such a way that routes can be planned.</p> </li> <li> <p>Start sequential planning and goal achievement by clicking <code>Send goals automatically</code></p> <p></p> </li> <li> <p>You can save <code>GoalsList</code> by clicking <code>Save to file</code>.</p> </li> <li> <p>After saving, you can run the <code>GoalsList</code> without using a plugin also:</p> <ul> <li>example: <code>ros2 launch tier4_automatic_goal_rviz_plugin automatic_goal_sender.launch.xml goals_list_file_path:=\"/tmp/goals_list.yaml\" goals_achieved_dir_path:=\"/tmp/\"</code><ul> <li><code>goals_list_file_path</code> - is the path to the saved <code>GoalsList</code> file to be loaded</li> <li><code>goals_achieved_dir_path</code> - is the path to the directory where the file <code>goals_achieved.log</code> will be created and the achieved goals will be written to it</li> </ul> </li> </ul> </li> </ol>"},{"location":"common/tier4_automatic_goal_rviz_plugin/#hints","title":"Hints","text":"<p>If the application (Engagement) goes into <code>ERROR</code> mode (usually returns to <code>EDITING</code> later), it means that one of the services returned a calling error (<code>code!=0</code>). In this situation, check the terminal output for more information.</p> <ul> <li>Often it is enough to try again.</li> <li>Sometimes a clearing of the current route is required before retrying.</li> </ul>"},{"location":"common/tier4_automatic_goal_rviz_plugin/#material-design-icons","title":"Material Design Icons","text":"<p>This project uses Material Design Icons by Google. These icons are used under the terms of the Apache License, Version 2.0.</p> <p>Material Design Icons are a collection of symbols provided by Google that are used to enhance the user interface of applications, websites, and other digital products.</p>"},{"location":"common/tier4_automatic_goal_rviz_plugin/#license","title":"License","text":"<p>The Material Design Icons are licensed under the Apache License, Version 2.0. You may obtain a copy of the License at:</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"common/tier4_automatic_goal_rviz_plugin/#acknowledgments","title":"Acknowledgments","text":"<p>We would like to express our gratitude to Google for making these icons available to the community, helping developers and designers enhance the visual appeal and user experience of their projects.</p>"},{"location":"common/tier4_control_rviz_plugin/","title":"tier4_control_rviz_plugin","text":""},{"location":"common/tier4_control_rviz_plugin/#tier4_control_rviz_plugin","title":"tier4_control_rviz_plugin","text":"<p>This package is to mimic external control for simulation.</p>"},{"location":"common/tier4_control_rviz_plugin/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"common/tier4_control_rviz_plugin/#input","title":"Input","text":"Name Type Description <code>/control/current_gate_mode</code> <code>tier4_control_msgs::msg::GateMode</code> Current GATE mode <code>/vehicle/status/velocity_status</code> <code>autoware_vehicle_msgs::msg::VelocityReport</code> Current velocity status <code>/api/autoware/get/engage</code> <code>tier4_external_api_msgs::srv::Engage</code> Getting Engage <code>/vehicle/status/gear_status</code> <code>autoware_vehicle_msgs::msg::GearReport</code> The state of GEAR"},{"location":"common/tier4_control_rviz_plugin/#output","title":"Output","text":"Name Type Description <code>/control/gate_mode_cmd</code> <code>tier4_control_msgs::msg::GateMode</code> GATE mode <code>/external/selected/control_cmd</code> <code>autoware_control_msgs::msg::ControlCommand</code> Control command <code>/external/selected/gear_cmd</code> <code>autoware_vehicle_msgs::msg::GearCommand</code> GEAR"},{"location":"common/tier4_control_rviz_plugin/#usage","title":"Usage","text":"<ol> <li> <p>Start rviz and select Panels.</p> <p></p> </li> <li> <p>Select tier4_control_rviz_plugin/ManualController and press OK.</p> <p></p> </li> <li> <p>Enter velocity in \"Set Cruise Velocity\" and Press the button to confirm. You can notice that GEAR shows D (DRIVE).</p> <p></p> </li> <li> <p>Press \"Enable Manual Control\" and you can notice that \"GATE\" and \"Engage\" turn \"Ready\" and the vehicle starts!</p> <p></p> </li> </ol>"},{"location":"common/tier4_debug_rviz_plugin/","title":"tier4_debug_rviz_plugin","text":""},{"location":"common/tier4_debug_rviz_plugin/#tier4_debug_rviz_plugin","title":"tier4_debug_rviz_plugin","text":"<p>This package is including jsk code. Note that jsk_overlay_utils.cpp and jsk_overlay_utils.hpp are BSD license.</p>"},{"location":"common/tier4_debug_rviz_plugin/#plugins","title":"Plugins","text":""},{"location":"common/tier4_debug_rviz_plugin/#float32multiarraystampedpiechart","title":"Float32MultiArrayStampedPieChart","text":"<p>Pie chart from <code>tier4_debug_msgs::msg::Float32MultiArrayStamped</code>.</p> <p></p>"},{"location":"common/tier4_debug_tools/","title":"tier4_debug_tools","text":""},{"location":"common/tier4_debug_tools/#tier4_debug_tools","title":"tier4_debug_tools","text":"<p>This package provides useful features for debugging Autoware.</p>"},{"location":"common/tier4_debug_tools/#usage","title":"Usage","text":""},{"location":"common/tier4_debug_tools/#tf2pose","title":"tf2pose","text":"<p>This tool converts any <code>tf</code> to <code>pose</code> topic. With this tool, for example, you can plot <code>x</code> values of <code>tf</code> in <code>rqt_multiplot</code>.</p> <pre><code>ros2 run tier4_debug_tools tf2pose {tf_from} {tf_to} {hz}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools tf2pose base_link ndt_base_link 100\n\n$ ros2 topic echo /tf2pose/pose -n1\nheader:\n  seq: 13\nstamp:\n    secs: 1605168366\nnsecs: 549174070\nframe_id: \"base_link\"\npose:\n  position:\n    x: 0.0387684271191\n    y: -0.00320360406477\n    z: 0.000276674520819\n  orientation:\n    x: 0.000335221893885\n    y: 0.000122020672186\n    z: -0.00539673212896\n    w: 0.999985368502\n---\n</code></pre>"},{"location":"common/tier4_debug_tools/#pose2tf","title":"pose2tf","text":"<p>This tool converts any <code>pose</code> topic to <code>tf</code>.</p> <pre><code>ros2 run tier4_debug_tools pose2tf {pose_topic_name} {tf_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools pose2tf /localization/pose_estimator/pose ndt_pose\n\n$ ros2 run tf tf_echo ndt_pose ndt_base_link 100\nAt time 1605168365.449\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000]\nin RPY (radian) [0.000, -0.000, 0.000]\nin RPY (degree) [0.000, -0.000, 0.000]\n</code></pre>"},{"location":"common/tier4_debug_tools/#stop_reason2pose","title":"stop_reason2pose","text":"<p>This tool extracts <code>pose</code> from <code>stop_reasons</code>. Topics without numbers such as <code>/stop_reason2pose/pose/detection_area</code> are the nearest stop_reasons, and topics with numbers are individual stop_reasons that are roughly matched with previous ones.</p> <pre><code>ros2 run tier4_debug_tools stop_reason2pose {stop_reason_topic_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools stop_reason2pose /planning/scenario_planning/status/stop_reasons\n\n$ ros2 topic list | ag stop_reason2pose\n/stop_reason2pose/pose/detection_area\n/stop_reason2pose/pose/detection_area_1\n/stop_reason2pose/pose/obstacle_stop\n/stop_reason2pose/pose/obstacle_stop_1\n\n$ ros2 topic echo /stop_reason2pose/pose/detection_area -n1\nheader:\n  seq: 1\nstamp:\n    secs: 1605168355\nnsecs:    821713\nframe_id: \"map\"\npose:\n  position:\n    x: 60608.8433457\n    y: 43886.2410876\n    z: 44.9078212441\n  orientation:\n    x: 0.0\n    y: 0.0\n    z: -0.190261378408\n    w: 0.981733470901\n---\n</code></pre>"},{"location":"common/tier4_debug_tools/#stop_reason2tf","title":"stop_reason2tf","text":"<p>This is an all-in-one script that uses <code>tf2pose</code>, <code>pose2tf</code>, and <code>stop_reason2pose</code>. With this tool, you can view the relative position from base_link to the nearest stop_reason.</p> <pre><code>ros2 run tier4_debug_tools stop_reason2tf {stop_reason_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools stop_reason2tf obstacle_stop\nAt time 1605168359.501\n- Translation: [0.291, -0.095, 0.266]\n- Rotation: in Quaternion [0.007, 0.011, -0.005, 1.000]\nin RPY (radian) [0.014, 0.023, -0.010]\nin RPY (degree) [0.825, 1.305, -0.573]\n</code></pre>"},{"location":"common/tier4_debug_tools/#lateral_error_publisher","title":"lateral_error_publisher","text":"<p>This node calculate the control error and localization error in the trajectory normal direction as shown in the figure below.</p> <p></p> <p>Set the reference trajectory, vehicle pose and ground truth pose in the launch file.</p> <pre><code>ros2 launch tier4_debug_tools lateral_error_publisher.launch.xml\n</code></pre>"},{"location":"common/tier4_logging_level_configure_rviz_plugin/","title":"tier4_logging_level_configure_rviz_plugin","text":""},{"location":"common/tier4_logging_level_configure_rviz_plugin/#tier4_logging_level_configure_rviz_plugin","title":"tier4_logging_level_configure_rviz_plugin","text":"<p>This package provides an rviz_plugin that can easily change the logger level of each node.</p> <p></p> <p>This plugin dispatches services to the \"logger name\" associated with \"nodes\" specified in YAML, adjusting the logger level.</p> <p>Warning</p> <p>It is highly recommended to use this plugin when you're attempting to print any debug information. Furthermore, it is strongly advised to avoid using the logging level INFO, as it might flood the terminal with your information, potentially causing other useful information to be missed.</p> <p>Note</p> <p>To add your logger to the list, simply include the <code>node_name</code> and <code>logger_name</code> in the logger_config.yaml under the corresponding component or module. If the relevant component or module is not listed, you may add them yourself.</p> <p>Note</p> <p>As of November 2023, in ROS 2 Humble, users are required to initiate a service server in the node to use this feature. (This might be integrated into ROS standards in the future.) For easy service server generation, you can use the LoggerLevelConfigure utility.</p>"},{"location":"common/tier4_logging_level_configure_rviz_plugin/#how-to-use-the-plugin","title":"How to use the plugin","text":"<p>In RVIZ2, go to Panels and add LoggingLevelConfigureRVizPlugin. Then, search for the node you're interested in and select the corresponding logging level to print the logs.</p>"},{"location":"common/tier4_logging_level_configure_rviz_plugin/#how-to-add-or-find-your-logger-name","title":"How to add or find your logger name","text":"<p>Because there are no available ROS 2 CLI commands to list loggers, there isn't a straightforward way to check your logger name. Additionally, the following assumes that you already know which node you're working with.</p>"},{"location":"common/tier4_logging_level_configure_rviz_plugin/#for-logger-as-a-class-member-variable","title":"For logger as a class member variable","text":"<p>If your class doesn't have an <code>rclcpp::Logger</code> member variable, you can start by including one yourself:</p> <pre><code>mutable rclcpp::Logger logger_;\n</code></pre> <p>If your node already has a logger, it should, under normal circumstances, be similar to the node's name.</p> <p>For instance, if the node name is <code>/some_component/some_node/node_child</code>, the <code>logger_name</code> would be <code>some_component.some_node.node_child</code>.</p> <p>Should your log not print as expected, one approach is to initially set your logging level in the code to info, like so:</p> <pre><code>RCLCPP_INFO(logger_, \"Print something here.\");\n</code></pre> <p>This will result in something like the following being printed in the terminal:</p> <pre><code>[component_container_mt-36] [INFO 1711949149.735437551] [logger_name]: Print something here. (func() at /path/to/code:line_number)\n</code></pre> <p>Afterward, you can simply copy the <code>logger_name</code>.</p> <p>Warning</p> <p>Remember to revert your code to the appropriate logging level after testing. </p><pre><code>RCLCPP_DEBUG(logger_, \"Print something here.\");\n</code></pre>"},{"location":"common/tier4_logging_level_configure_rviz_plugin/#for-libraries","title":"For libraries","text":"<p>When dealing with libraries, such as utility functions, you may need to add the logger manually. Here's an example:</p> <pre><code>RCLCPP_WARN(\nrclcpp::get_logger(\"some_component\").get_child(\"some_child\").get_child(\"some_child2\"),\n\"Print something here.\");\n</code></pre> <p>In this scenario, the <code>logger_name</code> would be <code>some_component.some_child.some_child2</code>.</p>"},{"location":"common/tier4_screen_capture_rviz_plugin/","title":"tier4_screen_capture_rviz_plugin","text":""},{"location":"common/tier4_screen_capture_rviz_plugin/#tier4_screen_capture_rviz_plugin","title":"tier4_screen_capture_rviz_plugin","text":""},{"location":"common/tier4_screen_capture_rviz_plugin/#purpose","title":"Purpose","text":"<p>This plugin captures the screen of rviz.</p>"},{"location":"common/tier4_screen_capture_rviz_plugin/#interface","title":"Interface","text":"Name Type Description <code>/debug/capture/video</code> <code>std_srvs::srv::Trigger</code> Trigger to start screen capturing. <code>/debug/capture/video_with_buffer</code> <code>std_srvs::srv::Trigger</code> Trigger to start screen capturing with buffer. <code>/debug/capture/screen_shot</code> <code>std_srvs::srv::Trigger</code> Trigger to capture screen shot."},{"location":"common/tier4_screen_capture_rviz_plugin/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>This is only for debug or analyze. The <code>capture screen</code> button is still beta version which can slow frame rate. set lower frame rate according to PC spec.</p>"},{"location":"common/tier4_screen_capture_rviz_plugin/#usage","title":"Usage","text":"<ol> <li>Start rviz and select panels/Add new panel.    </li> </ol>"},{"location":"common/tier4_simulated_clock_rviz_plugin/","title":"tier4_simulated_clock_rviz_plugin","text":""},{"location":"common/tier4_simulated_clock_rviz_plugin/#tier4_simulated_clock_rviz_plugin","title":"tier4_simulated_clock_rviz_plugin","text":""},{"location":"common/tier4_simulated_clock_rviz_plugin/#purpose","title":"Purpose","text":"<p>This plugin allows publishing and controlling the simulated ROS time.</p>"},{"location":"common/tier4_simulated_clock_rviz_plugin/#output","title":"Output","text":"Name Type Description <code>/clock</code> <code>rosgraph_msgs::msg::Clock</code> the current simulated time"},{"location":"common/tier4_simulated_clock_rviz_plugin/#how-to-use-the-plugin","title":"How to use the plugin","text":"<ol> <li> <p>Launch planning simulator with <code>use_sim_time:=true</code>.</p> <pre><code>ros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/autoware_map/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit use_sim_time:=true\n</code></pre> <p>Warning If you launch the planning simulator without adding the <code>tier4_simulated_clock_rviz_plugin</code>, your simulation will not be running. You'll not even be able to place the initial and the goal poses.</p> </li> <li> <p>Start rviz and select panels/Add new panel.</p> <p></p> </li> <li> <p>Select tier4_clock_rviz_plugin/SimulatedClock and press OK.</p> <p></p> </li> <li> <p>Use the added panel to control how the simulated clock is published.</p> <p></p> <ol> <li>Pause button: pause/resume the clock.</li> <li>Speed: speed of the clock relative to the system clock.</li> <li>Rate: publishing rate of the clock.</li> <li>Step button: advance the clock by the specified time step.</li> <li>Time step: value used to advance the clock when pressing the step button d).</li> <li>Time unit: time unit associated with the value from e).</li> </ol> <p>Warning If you set the time step too large, your simulation will go haywire.</p> </li> </ol>"},{"location":"common/tier4_string_viewer_rviz_plugin/","title":"tier4_string_viewer_rviz_plugin","text":""},{"location":"common/tier4_string_viewer_rviz_plugin/#tier4_string_viewer_rviz_plugin","title":"tier4_string_viewer_rviz_plugin","text":""},{"location":"common/tier4_string_viewer_rviz_plugin/#purpose","title":"Purpose","text":"<p>This plugin displays the ROS message whose topic type is <code>autoware_internal_debug_msgs::msg::StringStamped</code> in rviz.</p>"},{"location":"common/tier4_string_viewer_rviz_plugin/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>TBD.</p>"},{"location":"common/tier4_string_viewer_rviz_plugin/#usage","title":"Usage","text":"<ol> <li>Start rviz and select panels/Add new panel.    </li> <li>Select tier4_string_viewer_rviz_plugin/StringViewerPanel and press OK.</li> </ol>"},{"location":"common/tier4_target_object_type_rviz_plugin/","title":"tier4_target_object_type_rviz_plugin","text":""},{"location":"common/tier4_target_object_type_rviz_plugin/#tier4_target_object_type_rviz_plugin","title":"tier4_target_object_type_rviz_plugin","text":"<p>This plugin allows you to check which types of the dynamic object is being used by each planner.</p> <p></p>"},{"location":"common/tier4_target_object_type_rviz_plugin/#limitations","title":"Limitations","text":"<p>Currently, which parameters of which module to check are hardcoded. In the future, this will be parameterized using YAML.</p>"},{"location":"control/stop_accel_evaluator/","title":"Stop Accel Evaluator","text":""},{"location":"control/stop_accel_evaluator/#stop-accel-evaluator","title":"Stop Accel Evaluator","text":"<p>The role of this node is to evaluate how smooth it is when a vehicle stops by calculating vehicle acceleration just before stopping.</p>"},{"location":"control/stop_accel_evaluator/#how-to-use","title":"How to use","text":"<pre><code>ros2 launch stop_accel_evaluator stop_accel_evaluator.launch.xml\n</code></pre> <p>Then you can see <code>stop_accel_evaluator/stop_accel</code> topic. This topic is published only when a vehicle stops.</p>"},{"location":"control/vehicle_cmd_analyzer/","title":"Vehicle Command Analyzer description","text":""},{"location":"control/vehicle_cmd_analyzer/#vehicle-command-analyzer-description","title":"Vehicle Command Analyzer description","text":""},{"location":"control/vehicle_cmd_analyzer/#overview","title":"Overview","text":"<p>This is a visualization tool for vehicle commands. You need plotjuggler to plot.</p> <p>The following time series data will be plotted on the left side.</p> <ul> <li>Velocity</li> <li>Acceleration (acceleration and derivative of velocity)</li> <li>Jerk (derivative of acceleration and second derivative of velocity)</li> <li>Lateral acceleration</li> </ul> <p>The following data will be plotted on the right side.</p> <ul> <li>XY plot of jerk-acceleration</li> </ul> <p></p>"},{"location":"control/vehicle_cmd_analyzer/#how-to-use","title":"How to use","text":"<ol> <li> <p>Launch the node.</p> <pre><code>ros2 launch vehicle_cmd_analyzer vehicle_cmd_analyzer.launch.xml vehicle_model:=lexus\n</code></pre> </li> <li> <p>Launch plotjuggler.</p> <pre><code>ros2 run plotjuggler plotjuggler\n</code></pre> </li> <li> <p>Load layout.xml from File-&gt;Layout.    </p> </li> <li>Press ok in the confirmation dialog.</li> <li>Select<code>/vehicle_cmd_analyzer/debug_values</code>.    </li> </ol>"},{"location":"control_data_collecting_tool/","title":"Control data collecting tool","text":""},{"location":"control_data_collecting_tool/#control-data-collecting-tool","title":"Control data collecting tool","text":"<p>This package provides tools for automatically collecting data using pure pursuit control within a specified rectangular area.</p> <p></p>"},{"location":"control_data_collecting_tool/#overview","title":"Overview","text":"<ul> <li>This package aims to collect a dataset consisting of control inputs (i.e. <code>control_cmd</code>) and observation variables (i.e. <code>kinematic_state</code>, <code>steering_status</code>, etc).</li> <li>The collected dataset can be used as training dataset for learning-based controllers, including smart_mpc.</li> <li> <p>Data collecting approach is as follows:</p> <ul> <li>Following the trajectory using a pure pursuit control law.</li> <li>Adding noises to the trajectory and the control command for data diversity, improving the prediction accuracy of learning model.</li> <li> <p>Setting the trajectory from the following types of trajectories ( [<code>eight_course</code>, <code>u_shaped_return</code>, <code>straight_line_positive</code>, <code>straight_line_negative</code>, <code>reversal_loop_circle</code>, <code>along_road</code>] ).</p> <ul> <li> <p><code>COURSE_NAME: eight_course</code></p> <p></p> </li> </ul> <ul> <li> <p><code>COURSE_NAME: u_shaped_return</code></p> <p></p> </li> </ul> <ul> <li> <p><code>COURSE_NAME: straight_line_positive</code> or <code>COURSE_NAME: straight_line_negative</code></p> <p>( Both \"straight_line_positive\" and \"straight_line_negative\" represent straight line courses, but the direction of travel of the course is reversed.)</p> <p></p> </li> </ul> <ul> <li> <p><code>COURSE_NAME: reversal_loop_circle</code></p> <p>Drive within a circle while adding trajectories and collect data.</p> <p></p> </li> </ul> <ul> <li> <p><code>COURSE_NAME: along_road</code></p> <p>Generate trajectories along the road. This is particularly useful when drawing long straight paths along the road.</p> <p>In this course, data collection is conducted only on long straight trajectories, while constant velocity, <code>velocity_on_curve</code>, is maintained when driving on sections that include curves.</p> <p>The minimum length of these long straight trajectories can be specified using the parameter <code>minimum_length_of_straight_line</code> (These two parameters <code>velocity_on_curve</code> and <code>minimum_length_of_straight_line</code> can be configured in <code>./config/course_param/along_road_param.yaml</code>).</p> <p></p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"control_data_collecting_tool/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Launch Autoware.</p> <pre><code>ros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/autoware_map/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit\n</code></pre> </li> <li> <p>Set an initial pose, see here.</p> </li> <li> <p>Add the DataCollectingAreaSelectionTool and DataCollectingGoalPlugin RViz plugins by clicking the \"+\" icon at the top of the RViz window.  </p> </li> <li> <p>Launch control_data_collecting_tool.</p> <pre><code>ros2 launch control_data_collecting_tool control_data_collecting_tool.launch.py map_path:=$HOME/autoware_map/sample-map-planning accel_brake_map_path:=/path/to/your/accel_brake_map_dir\n</code></pre> <p>- If you use the <code>along_road</code> course, please specify the same map for <code>map_path</code> as the one used when launching Autoware. <code>map_path</code> is not necessary when using courses other than <code>along_road</code>.</p> <p>- If you set CONTROL_MODE to actuation_cmd or external_actuation_cmd, please specify the directory where the accel/brake maps used by your control system are located.</p> <p>- Control data collecting tool automatically records topics included in <code>config/topics.yaml</code> when the above command is executed. Topics will be saved in rosbag2 format in the current directory.</p> <p>- The data from <code>/localization/kinematic_state</code> and <code>/localization/acceleration</code> located in the directory (rosbag2 format) where the command is executed will be automatically loaded and reflected in the data count for these topics.     (If <code>LOAD_ROSBAG2_FILES</code> in <code>config/param.yaml</code> is set to <code>false</code>, the data is not loaded.)</p> </li> <li> <p>Add visualization in rviz:</p> <p>- <code>/data_collecting_area</code>     - Type: Polygon   - <code>/data_collecting_trajectory_marker_array</code>     - Type: MarkerArray   - <code>/data_collecting_lookahead_marker_array</code>     - Type: MarkerArray</p> </li> <li> <p>The following actions differ depending on the selected course. If you select the trajectory from [<code>eight_course</code>, <code>u_shaped_return</code>, <code>straight_line_positive</code>, <code>straight_line_negative</code>, <code>reversal_loop_circle</code>], please proceed to 6.1. If you select the trajectory from [<code>along_road</code>], please proceed to 6.2.</p> <p>- 6.1 If you choose the trajectory from [<code>eight_course</code>, <code>u_shaped_return</code>, <code>straight_line_positive</code>, <code>straight_line_negative</code>, <code>reversal_loop_circle</code>], select <code>DataCollectingAreaSelectionTool</code> plugin.</p> <pre><code>&lt;img src=\"resource/DataCollectingAreaSelection.png\" width=\"480\"&gt;\n\nHighlight the data collecting area by dragging the mouse over it.\n\n&lt;img src=\"resource/select_area.gif\" width=\"480\"&gt;\n\n&gt; [!NOTE]\n&gt; You cannot change the data collecting area while driving.\n</code></pre> <p>- 6.2 If you choose the trajectory from [<code>along_road</code>], select <code>DataCollectingGoalPose</code> plugin.</p> <pre><code>  &lt;img src=\"resource/DataCollectingGoalPose.png\" width=\"480\"&gt;\n\nBy setting the pose of the goal point, a trajectory is generated on the map.\n\n  &lt;img src=\"resource/set_trajectory_along_road.gif\" width=\"480\"&gt;\n\nAs soon as the trajectory is generated, the plot with the map and trajectory drawn on it will be created (please see the following picture).\nIn the sections labeled `velocity = const (velocity_on_curve)` in the legend, the vehicle travels at a constant velocity of `velocity_on_curve`. In the sections labeled `Data collection is conducted`, data collection is performed.\n\n  &lt;img src=\"resource/along_load_plot.png\" width=\"480\"&gt;\n\n&gt; [!NOTE]\n&gt; You cannot change the goal pose while driving.\n&gt; In cases where course generation fails, which can happen under certain conditions, please reposition the vehicle or redraw the goal pose.\n</code></pre> </li> <li> <p>The following actions differ depending on the <code>CONTROL_MODE</code>. If you select the control mode from [ <code>acceleration_cmd</code>], please proceed to 7.1. If you select the control mode from [<code>actuation_cmd</code>], please proceed to 7.2. If you select the control mode from [<code>external_acceleration_cmd</code>, <code>external_actuation_cmd</code>], please proceed to 7.3.</p> <p>- 7.1 If you choose the control mode from [ <code>acceleration_cmd</code>], click the <code>LOCAL</code> button in <code>AutowareStatePanel</code>.</p> <pre><code>  &lt;img src=\"resource/push_LOCAL.png\" width=\"480\"&gt;\n\n  Then, data collecting starts.\n\n  &lt;img src=\"resource/push_LOCAL.gif\" width=\"480\"&gt;\n\n  You can monitor the data collection status in real-time through the window that pops up when this node is launched.\n  (From top to bottom: the speed-acceleration phase diagram, the speed-acceleration heatmap, the speed-steering angle heatmap, the speed-steer rate heatmap, and the speed-jerk heatmap.)\n\n  &lt;img src=\"resource/data_collection_status.png\" width=\"480\"&gt;\n\n  For the speed-acceleration heatmap, speed-steering angle heatmap, and speed-steer rate heatmap, the collection range can be specified by the masks located in the folder `config/masks/MASK_NAME` where `MASK_NAME` is a parameter specifying mask name (Please also see `config/common_param.yaml`).\n  The specified heatmap cells are designed to change from blue to green once a certain amount of data (`VEL_ACC_THRESHOLD`, `VEL_STEER_THRESHOLD`, `VEL_ABS_STEER_RATE_THRESHOLD` ) is collected. It is recommended to collect data until as many cells as possible turn green.\n</code></pre> <p>- 7.2 If you choose the control mode from [<code>actuation_cmd</code>], click the LOCAL button in the AutowareStatePanel as described in Section 7.1.     &gt; [NOTE]     &gt; At this time, the control mode <code>actuation_cmd</code> is only implemented in the course <code>reversal_loop_circle</code> and cannot be used in other courses.</p> <pre><code>This mode allows you to collect data on various accel and brake pedal inputs. To monitor the data collection status of accel/brake input, please use the functionality of [autoware_accel_brake_map_calibrator](https://github.com/autowarefoundation/autoware.universe/blob/main/vehicle/autoware_accel_brake_map_calibrator/README.md).\n</code></pre> <p>- 7.3 In the case you choose the control mode from  [<code>external_acceleration_cmd</code>, <code>external_actuation_cmd</code>].</p> <pre><code>- `external_acceleration_cmd`\n\n  This mode enables the collection of constant acceleration data for both positive and negative acceleration scenarios.\n\n  - Positive Acceleration Data Collection\n\n    a. Start the Tool by using the following command\n\n      ```bash\n      ros2 run control_data_collecting_tool data_collecting_acceleration_cmd.py\n      ```\n\n    b. Confirm Data Collection: The tool prompts you to confirm whether to proceed with positive acceleration data collection:\n\n      ```bash\n      Do you want to collect constant positive acceleration cmd data? (yes/no)\n      ```\n\n    c. Input Acceleration: When prompted, input the desired acceleration value:\n\n      ```bash\n      Target acceleration [0.0 ~ 2.0 m/s^2]\n      ```\n\n    d. Gear Change and Readiness Check: Pleas click the `LOCAL` button in `AutowareStatePanel`  as in 7.1 and the tool checks if the system is ready for the operation. You will see the following prompt:\n\n      ```bash\n      Ready to drive? (yes/no)\n      ```\n\n    f. Execution and Recording: After 3-second counting, the vehicle accelerates to `TARGET_VELOCITY` specified in the configuration file. During this process, the following message is displayed:\n\n      ```bash\n      Accelerate with target_acceleration m/s^2\n      ```\n\n      A ROS bag file records all relevant topics during this session. The filename is generated as constant_acceleration_cmd_ACCEL_TARGET_ACCELERATION_CURRENT_TIME, where TARGET_ACCELERATION is input target acceleration value, and CURRENT_TIME is the timestamp in YYYYMMDD-HHMMSS format. The ROS bag file will specifically include topics matching the regular expression:\n\n      ```bash\n      /control/(.*)|/vehicle/(.*)|/imu/(.*)|/sensing/imu/(.*)\n      ```\n\n    g. Deceleration Phase: After reaching `TARGET_VELOCITY`, the tool applies a deceleration using the TARGET_ACCELERATION_FOR_BRAKE parameter to bring the vehicle to a stop.\n\n    h. Completion: Once the data is recorded and the vehicle is safely stopped, the session ends. The tool validates the recorded data.\n\n  - Negative Acceleration Data Collection\n\n    a. Start the Tool by using the following command\n\n      ```bash\n      ros2 run control_data_collecting_tool data_collecting_acceleration_cmd\n      ```\n\n    b. Confirm Data Collection: The tool prompts you to confirm whether to proceed with negative acceleration data collection (the following message will be displayed after answering `no` to `Do you want to collect constant positive acceleration cmd data? (yes/no)` in Positive Acceleration Data Collection):\n\n      ```bash\n      Do you want to collect constant negative acceleration cmd data? (yes/no)\n      ```\n\n    c. Input Acceleration: When prompted, input the desired acceleration value:\n\n      ```bash\n      Target acceleration [-5.0 ~ 0.0 m/s^2]\n      ```\n\n    d. Gear Change and Readiness Check: Pleas click the `LOCAL` button in `AutowareStatePanel` as in 7.1 and the tool checks if the system is ready for the operation. You will see the following prompt:\n\n      ```bash\n      Ready to drive? (yes/no)\n      ```\n\n    e. Acceleration Phase: After 3-second counting, the vehicle accelerates to the `TARGET_VELOCITY` with TARGET_ACCELERATION_FOR_DRIVE before braking.\n\n    f. Braking and Recording: Once `TARGET_VELOCITY` is achieved, the tool applies the braking command. During this process, you will see:\n\n      ```bash\n      Accelerate with target_acceleration m/s^2\n      ```\n\n      A ROS bag file records all relevant topics during this session. The filename is generated as constant_acceleration_cmd_BRAKE_TARGET_ACCELERATION_CURRENT_TIME, where TARGET_ACCELERATION is input target acceleration value, and CURRENT_TIME is the timestamp in YYYYMMDD-HHMMSS format. The ROS bag file will specifically include topics matching the regular expression:\n\n      ```bash\n      /control/(.*)|/vehicle/(.*)|/imu/(.*)|/sensing/imu/(.*)\n      ```\n\n    g. Completion: Once the data is recorded and the vehicle is safely stopped, the session ends. The tool validates the recorded data.\n\n- `external_actuation_cmd`\n\n  This mode enables the collection of constant accel/brake pedal input data.\n\n  - Accel Pedal Data Collection\n\n    a. Start the tool by using the following command\n\n      ```bash\n      ros2 run control_data_collecting_tool data_collecting_actuation_cmd\n      ```\n\n    b. Confirm Data Collection: The tool prompts you to confirm whether to proceed with positive acceleration data collection:\n\n      ```bash\n      Do you want to accel pedal input data? (yes/no)\n      ```\n\n    c. Input Accel Pedal input: When prompted, input the desired accel pedal input value:\n\n      ```bash\n      Target accel pedal input [0.0 ~ 0.5 ]\n      ```\n\n    d. Gear Change and Readiness Check: Pleas click the `LOCAL` button in `AutowareStatePanel`  as in 7.1 and the tool checks if the system is ready for the operation. You will see the following prompt:\n\n      ```bash\n      Ready to drive? (yes/no)\n      ```\n\n    e. Execution and Recording: After 3-second counting, the vehicle accelerates to `TARGET_VELOCITY` specified in the configuration file. During this process, the following message is displayed:\n\n      ```bash\n      Actuate with accel pedal input: target_accel_pedal_input\n      ```\n\n      A ROS bag file records all relevant topics during this session. The filename is generated as constant_actuation_cmd_ACCEL_TARGET_ACCELERATION_CURRENT_TIME, where TARGET_ACCELERATION is input target acceleration value, and CURRENT_TIME is the timestamp in YYYYMMDD-HHMMSS format. The ROS bag file will specifically include topics matching the regular expression:\n\n      ```bash\n      /control/(.*)|/vehicle/(.*)|/imu/(.*)|/sensing/imu/(.*)\n      ```\n\n    f. Deceleration Phase: After reaching `TARGET_VELOCITY`, the tool applies a deceleration using the TARGET_ACTUATION_FOR_BRAKE parameter to bring the vehicle to a stop.\n\n    g. Completion: Once the data is recorded and the vehicle is safely stopped, the session ends. The tool validates the recorded data.\n\n  - Brake Pedal Data Collection\n\n    a. Start the tool by using the following command\n\n      ```bash\n      ros2 run control_data_collecting_tool data_collecting_actuation_cmd\n      ```\n\n    b. Confirm Data Collection: The tool prompts you to confirm whether to proceed with brake pedal input data collection (the following message will be displayed after answering `no` to `Do you want to accel pedal input data? (yes/no)` in Accel Pedal Data Collection):\n\n      ```bash\n      Do you want to brake pedal input data? (yes/no)\n      ```\n\n    c. Input Brake Pedal input: When prompted, input the desired brake pedal input value:\n\n      ```bash\n      Target brake pedal input [0.0 ~ 0.8 ]\n      ```\n\n    d. Gear Change and Readiness Check: Pleas click the `LOCAL` button in `AutowareStatePanel` as in 7.1 and the tool checks if the system is ready for the operation. You will see the following prompt:\n\n      ```bash\n      Ready to drive? (yes/no)\n      ```\n\n    e. Acceleration Phase: After 3-second counting, the vehicle accelerates to the `TARGET_VELOCITY` with TARGET_ACTUATION_FOR_ACCEL before braking.\n\n    f. Braking and Recording: Once `TARGET_VELOCITY` is achieved, the tool applies the braking command. During this process, you will see:\n\n      ```bash\n      Actuate with brake pedal input: target_brake_pedal_input\n      ```\n\n      A ROS bag file records all relevant topics during this session. The filename is generated as constant_actuation_cmd_ACCEL_TARGET_ACCELERATION_CURRENT_TIME, where TARGET_ACCELERATION is input target acceleration value, and CURRENT_TIME is the timestamp in YYYYMMDD-HHMMSS format. The ROS bag file will specifically include topics matching the regular expression:\n\n      ```bash\n      /control/(.*)|/vehicle/(.*)|/imu/(.*)|/sensing/imu/(.*)\n      ```\n\n    g. Completion: Once the data is recorded and the vehicle is safely stopped, the session ends. The tool validates the recorded data.\n</code></pre> </li> <li> <p>If you want to stop data collecting automatic driving, run the following command</p> <pre><code>ros2 topic pub /data_collecting_stop_request std_msgs/msg/Bool \"data: true\" --once\n</code></pre> <p>[!NOTE] When the car crosses the green boundary line, a similar stopping procedure will be automatically triggered.</p> </li> <li> <p>If you want to restart data collecting automatic driving, run the following command</p> <pre><code>ros2 topic pub /data_collecting_stop_request std_msgs/msg/Bool \"data: false\" --once\n</code></pre> </li> </ol>"},{"location":"control_data_collecting_tool/#specify-data-collection-range","title":"Specify data collection range","text":"<p>You can create an original mask to specify the data collection range for the heatmap explained in step 7 of the \"How to Use\" section.</p> <ol> <li> <p>Change the <code>MASK_NAME</code> parameter in <code>config/common_param.yaml</code> from its default value of <code>default</code> to any name you prefer.</p> </li> <li> <p>Modify parameters such as <code>VEL_ACC_THRESHOLD</code>, <code>VEL_STEER_THRESHOLD</code>, and <code>VEL_ABS_STEER_RATE_THRESHOLD</code> to determine the desired amount of data for each cell in the speed-acceleration heatmap, speed-steering angle heatmap, and speed-steer rate heatmap.</p> </li> <li> <p>In the <code>scripts/masks</code> directory, run</p> <pre><code>python3 mask_selector.py\n</code></pre> <p>then, matplotlib windows for selecting the collection range of the speed-acceleration heatmap, speed-steering angle heatmap, and speed-steer rate heatmap will be displayed, one for each.</p> <p></p> <p>In these windows, you can modify the heatmaps by clicking or dragging within them. Once you've made your changes, pressing <code>Ctrl+C</code> in the terminal will automatically save the updated maps.</p> <p>Afterward, rebuild the <code>control_data_collecting_tool</code> using the following command</p> <pre><code>colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-w\" --symlink-install --continue-on-error --packages-up-to control_data_collecting_tool\n</code></pre> <p>and relaunch the control_data_collecting_tool with</p> <pre><code>ros2 launch control_data_collecting_tool control_data_collecting_tool.launch.py map_path:=$HOME/autoware_map/sample-map-planning\n</code></pre> <p>This will allow you to see the selected mask applied.</p> <p></p> </li> </ol>"},{"location":"control_data_collecting_tool/#trajectory-generation-and-data-collection-logic","title":"Trajectory generation and data collection logic","text":""},{"location":"control_data_collecting_tool/#data-collection-logic-common-to-all-courses","title":"Data collection logic common to all courses","text":"<p>In <code>control_data_collection_tool</code>, all courses collect velocity and acceleration data in a similar manner.</p> <p>By appropriately adjusting the <code>target_velocity</code> provided to the pure pursuit algorithm, speed and acceleration data are efficiently collected. Data collection consists of four phases: selection of target speed and acceleration, acceleration phase, constant speed phase, the deceleration phase. A general method for collecting speed and acceleration data is described below, though it does not strictly adhere to the outlined steps.</p> <ol> <li> <p>Selection of target speed and acceleration</p> <p>In the speed-acceleration heatmap, the speed and acceleration with fewer data points are set as the target speed and acceleration, which are then defined here as <code>target_velocity_on_section</code> and <code>target_acceleration_on_section</code>.</p> </li> <li> <p>Acceleration phase    The vehicle accelerates by setting <code>target_velocity</code> as follows until its speed exceeds <code>target_velocity_on_section</code>.</p> <pre><code>  # b is constant variable and sine_curve is derived from appropriate amplitude and period, defined separately\n  target_velocity = current_velocity + abs(target_acceleration_on_section) / acc_kp * (b + sine_curve)\n</code></pre> <p><code>current_velocity</code> is a current velocity of vehicle and <code>acc_kp</code> accel command proportional gain in pure pursuit algorithm. <code>sine_curve</code> is a sine wave added to partially mitigate situations where the vehicle fails to achieve the target acceleration.</p> </li> <li> <p>Constant speed phase    When the vehicle reaches <code>target_velocity_on_section</code>, <code>target_velocity</code> is defined as follows to allow the vehicle to run around the target speed for a certain period of time.</p> <pre><code>  # b is constant variable and sine_curve is derived from appropriate amplitude and period, defined separately\n  target_velocity = target_velocity_on_section + b + sine_curve\n</code></pre> </li> <li> <p>Deceleration phase    In the deceleration phase, similar to the acceleration phase, <code>target_velocity</code> is defined as follows to ensure the vehicle decelerates.</p> <pre><code>  # b is constant variable and sine_curve is derived from appropriate amplitude and period, defined separately\n  target_velocity = current_velocity - abs(target_acceleration_on_section) / acc_kp * (b + sine_curve)\n</code></pre> <p>After decelerating to a sufficiently low speed, return to step i.</p> </li> </ol>"},{"location":"control_data_collecting_tool/#trajectory-generation-and-data-collection-logic-specific-to-reversal_loop_circle","title":"Trajectory generation and data collection logic specific to <code>reversal_loop_circle</code>","text":"<p>In the <code>reversal_loop_circle</code> course, sections are sequentially added to the course while collecting various data on speed, acceleration, and steering angle.</p>"},{"location":"control_data_collecting_tool/#trajectory-generation-logic-for-reversal_loop_circle","title":"Trajectory generation logic for <code>reversal_loop_circle</code>","text":"<p>The <code>reversal_loop_circle</code> aims to generate a trajectory with the largest possible radius of curvature within a radius <code>trajectory_radius</code>, allowing data collection in a confined area without significantly reducing speed.</p> <p>The <code>reversal_loop_circle</code> is primarily generated by connecting the following three components, <code>common tangent</code>, <code>circumscribing_circle</code> and <code>boundary</code> as shown in the following picture.</p> <p></p> <p>All the components listed below are available in both clockwise and counterclockwise versions. The rationale for having two versions is to ensure data collection for both right-hand drive and left-hand drive configurations.</p> <ul> <li> <p><code>common tangent</code></p> <p>The <code>common tangent</code> is generated by drawing a common tangent to two inscribed circles. In this section, a sine curve is added in the normal direction to generate a trajectory for collecting data with larger steering angles. The amplitude of the sine curve is determined based on the desired steering angle data.</p> <p></p> <p></p> </li> </ul> <ul> <li> <p><code>circumscribing_circle</code></p> <p>The <code>circumscribing_circle</code> part is created by drawing the common circumscribed circle of the circles. This section is generated to achieve nearly straight movement within the outer circle while minimizing the increase in curvature.</p> <p></p> <p></p> </li> </ul> <ul> <li> <p><code>boundary</code></p> <p>The <code>boundary</code> part is used to connect the <code>common tangent</code> and the <code>circumscribing_circle</code> sections.</p> <p></p> <p></p> </li> </ul>"},{"location":"control_data_collecting_tool/#velocity-and-steering-angle-data-collection-logic-for-reversal_loop_circle","title":"Velocity and steering angle data collection logic for <code>reversal_loop_circle</code>","text":"<p>Speed and steering angle data are gathered in the <code>common tangent</code> section of the trajectory. The common tangent section is particularly effective for collecting steering angle data because a trajectory with minimal data is intentionally created by adding a sine wave of suitable amplitude to the curvature.</p> <p>The following two steps are taken to obtain steering angle data.</p> <ol> <li> <p>Starting from the ego vehicle's current position, the system examines a segment of the trajectory ahead, covering a distance defined by look_ahead_distance, to identify the point of maximum curvature.</p> </li> <li> <p>This maximum curvature determines the steering angle the vehicle will use. The vehicle then adjusts its speed toward the speed associated with the sparsest steering angle data.</p> <p></p> </li> </ol>"},{"location":"control_data_collecting_tool/#parameter","title":"Parameter","text":""},{"location":"control_data_collecting_tool/#common-parameters","title":"Common Parameters","text":"<p>ROS 2 parameters which are common in all trajectories (<code>/config/common_param.yaml</code>):</p> Name Type Description Default value <code>CONTROL_MODE</code> <code>string</code> Control mode [<code>acceleration_cmd</code>, <code>actuation_cmd</code>, <code>external_acceleration_cmd</code>, <code>external_actuation_cmd</code>] <code>acceleration_cmd</code> <code>LOAD_ROSBAG2_FILES</code> <code>bool</code> Flag that determines whether to load rosbag2 data or not true <code>COURSE_NAME</code> <code>string</code> Course name [<code>eight_course</code>, <code>u_shaped_return</code>, <code>straight_line_positive</code>, <code>straight_line_negative</code>, <code>reversal_loop_circle</code>, <code>along_road</code>] <code>reversal_loop_circle</code> <code>NUM_BINS_V</code> <code>int</code> Number of bins of velocity in heatmap 10 <code>NUM_BINS_STEER</code> <code>int</code> Number of bins of steer in heatmap 20 <code>NUM_BINS_A</code> <code>int</code> Number of bins of acceleration in heatmap 10 <code>NUM_BINS_ABS_STEER_RATE</code> <code>int</code> Number of bins of absolute value of steer rate in heatmap 5 <code>NUM_BINS_JERK</code> <code>int</code> Number of bins of jerk in heatmap 10 <code>NUM_BINS_ACCEL_PEDAL_INPUT</code> <code>int</code> Number of bins of accel pedal input in heatmap 8 <code>NUM_BINS_BRAKE_PEDAL_INPUT</code> <code>int</code> Number of bins of brake pedal input in heatmap 16 <code>V_MIN</code> <code>double</code> Minimum velocity in heatmap [m/s] 0.0 <code>V_MAX</code> <code>double</code> Maximum velocity in heatmap [m/s] 11.5 <code>STEER_MIN</code> <code>double</code> Minimum steer in heatmap [rad] -0.6 <code>STEER_MAX</code> <code>double</code> Maximum steer in heatmap [rad] 0.6 <code>A_MIN</code> <code>double</code> Minimum acceleration in heatmap [m/s^2] -1.0 <code>A_MAX</code> <code>double</code> Maximum acceleration in heatmap [m/s^2] 1.0 <code>max_lateral_accel</code> <code>double</code> Max lateral acceleration limit [m/s^2] 2.70 <code>ABS_STEER_RATE_MIN</code> <code>double</code> Minimum absolute value of steer rate in heatmap [rad/s] 0.0 <code>ABS_STEER_RATE_MAX</code> <code>double</code> Maximum absolute value of steer rate in heatmap [rad/s] 0.3 <code>JERK_MIN</code> <code>double</code> Minimum jerk in heatmap [m/s^3] -0.5 <code>JERK_MAX</code> <code>double</code> Maximum jerk in heatmap [m/s^3] 0.5 <code>ACCEL_PEDAL_INPUT_MIN</code> <code>double</code> Minimum accel pedal in heatmap 0.4 <code>ACCEL_PEDAL_INPUT_MAX</code> <code>double</code> Maximum accel pedal in heatmap 0.0 <code>BRAKE_PEDAL_INPUT_MIN</code> <code>double</code> Minimum brake pedal in heatmap 0.8 <code>BRAKE_PEDAL_INPUT_MAX</code> <code>double</code> Maximum brake pedal in heatmap 0.0 <code>STEER_THRESHOLD_FOR_PEDAL_INPUT_COUNT</code> <code>string</code> Threshold of steering angle to count pedal input data 0.2 <code>MASK_NAME</code> <code>string</code> Directory name of masks for data collection <code>default</code> <code>VEL_ACC_THRESHOLD</code> <code>int</code> Threshold of velocity-and-acc heatmap in data collection 40 <code>VEL_STEER_THRESHOLD</code> <code>int</code> Threshold of velocity-and-steer heatmap in data collection 20 <code>VEL_ABS_STEER_RATE_THRESHOLD</code> <code>int</code> Threshold of velocity-and-abs_steer_rate heatmap in data collection 20 <code>max_lateral_accel</code> <code>double</code> Max lateral acceleration limit [m/s^2] 2.00 <code>lateral_error_threshold</code> <code>double</code> Lateral error threshold where applying velocity limit [m] 1.50 <code>yaw_error_threshold</code> <code>double</code> Yaw error threshold where applying velocity limit [rad] 0.75 <code>velocity_limit_by_tracking_error</code> <code>double</code> Velocity limit applied when tracking error exceeds threshold [m/s] 1.0 <code>mov_ave_window</code> <code>int</code> Moving average smoothing window size 50 <code>target_longitudinal_velocity</code> <code>double</code> Target longitudinal velocity [m/s] 6.0 <code>pure_pursuit_type</code> <code>string</code> Pure pursuit type (<code>naive</code> or <code>linearized</code> steer control law ) <code>linearized</code> <code>wheel_base</code> <code>double</code> Wheel base [m] 2.79 <code>acc_kp</code> <code>double</code> Accel command proportional gain 1.0 <code>lookahead_time</code> <code>double</code> Pure pursuit lookahead time [s] 2.0 <code>min_lookahead</code> <code>double</code> Pure pursuit minimum lookahead length [m] 2.0 <code>linearized_pure_pursuit_steer_kp_param</code> <code>double</code> Linearized pure pursuit steering P gain parameter 2.0 <code>linearized_pure_pursuit_steer_kd_param</code> <code>double</code> Linearized pure pursuit steering D gain parameter 2.0 <code>stop_acc</code> <code>double</code> Accel command for stopping data collecting driving [m/s^2] -2.0 <code>stop_jerk_lim</code> <code>double</code> Jerk limit for stopping data collecting driving [m/s^3] 5.0 <code>lon_acc_lim</code> <code>double</code> Longitudinal acceleration limit [m/s^2] 1.5 <code>lon_jerk_lim</code> <code>double</code> Longitudinal jerk limit [m/s^3] 0.5 <code>steer_lim</code> <code>double</code> Steering angle limit [rad] 0.6 <code>steer_rate_lim</code> <code>double</code> Steering angle rate limit [rad/s] 0.6 <p>The following parameters are common to all trajectories but can be defined individually for each trajectory. (<code>/config/course_param/COURSE_NAME_param.yaml</code>):</p> Name Type Description Default value <code>COLLECTING_DATA_V_MIN</code> <code>double</code> Minimum velocity for data collection [m/s] 0.5 <code>COLLECTING_DATA_V_MAX</code> <code>double</code> Maximum velocity for data collection [m/s] 8.0 <code>COLLECTING_DATA_A_MIN</code> <code>double</code> Minimum velocity for data collection [m/s^2] 1.0 <code>COLLECTING_DATA_A_MAX</code> <code>double</code> Maximum velocity for data collection [m/s^2] -1.0 <code>longitudinal_velocity_noise_amp</code> <code>double</code> Target longitudinal velocity additional sine noise amplitude [m/s] 0.01 <code>longitudinal_velocity_noise_min_period</code> <code>double</code> Target longitudinal velocity additional sine noise minimum period [s] 5.0 <code>longitudinal_velocity_noise_max_period</code> <code>double</code> Target longitudinal velocity additional sine noise maximum period [s] 20.0 <code>acc_noise_amp</code> <code>double</code> Accel command additional sine noise amplitude [m/ss] 0.01 <code>acc_noise_min_period</code> <code>double</code> Accel command additional sine noise minimum period [s] 5.0 <code>acc_noise_max_period</code> <code>double</code> Accel command additional sine noise maximum period [s] 20.0 <code>steer_noise_amp</code> <code>double</code> Steer command additional sine noise amplitude [rad] 0.01 <code>steer_noise_max_period</code> <code>double</code> Steer command additional sine noise maximum period [s] 5.0 <code>steer_noise_min_period</code> <code>double</code> Steer command additional sine noise minimum period [s] 20.0"},{"location":"control_data_collecting_tool/#course-specific-parameters","title":"Course-Specific Parameters","text":"<p>Each trajectory has specific ROS 2 parameters.</p> <ul> <li><code>COURSE_NAME: eight_course</code></li> </ul> Name Type Description Default value <code>velocity_on_curve</code> <code>double</code> Constant velocity on curve [m/s] 4.5 <code>smoothing_window</code> <code>double</code> Width of the window for trajectory smoothing 400 <ul> <li><code>COURSE_NAME: u_shaped_return</code></li> </ul> Name Type Description Default value <code>velocity_on_curve</code> <code>double</code> Constant velocity on curve [m/s] 4.5 <ul> <li><code>COURSE_NAME: straight_line_positive</code> or <code>COURSE_NAME: straight_line_negative</code></li> </ul> Name Type Description Default value <code>stopping_buffer_distance</code> <code>double</code> The safety distance from end of the straight line [m] 10.0 <ul> <li><code>COURSE_NAME: reversal_loop_circle</code></li> </ul> Name Type Description Default value <code>trajectory_radius</code> <code>double</code> Radius of the circle where trajectories are generated [m] 35.0 <code>enclosing_radius</code> <code>double</code> Radius of the circle enclosing the generated trajectories [m] 40.0 <code>look_ahead_distance</code> <code>double</code> The distance referenced ahead of the vehicle for collecting steering angle data [m] 35.0 <ul> <li><code>COURSE_NAME: along_road</code></li> </ul> Name Type Description Default value <code>velocity_on_curve</code> <code>double</code> Constant velocity on curve [m/s] 3.5 <code>stopping_buffer_distance</code> <code>double</code> The safety distance from end of the straight line [m] 15.0 <code>course_width</code> <code>double</code> The width of the trajectory [m] 1.5 <code>smoothing_window</code> <code>double</code> Width of the window for trajectory smoothing 100 <code>minimum_length_of_straight_line</code> <code>double</code> The minimum length of straight line for data collection [m] 50.0 <code>longitude</code> <code>double</code> The longitude of the origin specified when loading the map [degree] 139.6503 <code>latitude</code> <code>double</code> The latitude of the origin specified when loading the map [degree] 35.6762"},{"location":"control_data_collecting_tool/#parameters-for-data_collecting_acceleration_cmdpy-and-data_collecting_actuation_cmdpy","title":"Parameters for <code>data_collecting_acceleration_cmd.py</code> and <code>data_collecting_actuation_cmd.py</code>","text":"<ul> <li><code>data_collecting_acceleration_cmd.py</code></li> </ul> Name Type Description Default value <code>TARGET_VELOCITY</code> <code>double</code> The maximum velocity for data collection [m/s] 11.80 <code>TARGET_ACCELERATION_FOR_DRIVE</code> <code>double</code> Target acceleration when collecting deceleration data [m/s^2] 0.3 <code>TARGET_ACCELERATION_FOR_BRAKE</code> <code>double</code> Target deceleration when collecting acceleration data [m/s^2] 0.5 <code>TARGET_JERK_FOR_DRIVE</code> <code>double</code> The target rate of change of acceleration (jerk) for smooth driving [m/s^3] 1.5 <code>TARGET_JERK_FOR_BRAKE</code> <code>double</code> The target rate of change of acceleration (jerk) when braking [m/s^3] -1.5 <code>MIN_ACCEL</code> <code>double</code> The minimum allowable acceleration for data collection [m/s^2] -5.0 <code>MAX_ACCEL</code> <code>double</code> The maximum allowable acceleration for data collection [m/s^2] 2.0 <ul> <li><code>data_collecting_actuation_cmd.py</code></li> </ul> Name Type Description Default value <code>TARGET_VELOCITY</code> <code>double</code> The maximum velocity for data collection [m/s] 11.80 <code>TARGET_ACTUATION_FOR_ACCEL</code> <code>double</code> Target accel pedal input when collecting brake pedal input data 0.3 <code>TARGET_ACTUATION_FOR_BRAKE</code> <code>double</code> Target brake pedal input when collecting accel pedal input data 0.5 <code>MAX_ACCEL_PEDAL</code> <code>double</code> The maximum allowable accel pedal input for data collection 0.5 <code>MIN_BRAKE_PEDAL</code> <code>double</code> The maximum allowable brake pedal input for data collection 0.8"},{"location":"driving_environment_analyzer/","title":"Driving Environment Analyzer","text":""},{"location":"driving_environment_analyzer/#driving-environment-analyzer","title":"Driving Environment Analyzer","text":"<p>\u3053\u306e\u30c4\u30fc\u30eb\u306fROSBAG\u306b\u542b\u307e\u308c\u308b\u8d70\u884c\u5c65\u6b74\u3092\u5143\u306b\u8d70\u884c\u74b0\u5883\u306eODD\u3092\u89e3\u6790\u3059\u308b\u30c4\u30fc\u30eb\u3067\u3059\u3002</p>"},{"location":"driving_environment_analyzer/#rosbagodd","title":"ROSBAG\u306e\u7279\u5b9a\u6642\u523b\u306b\u304a\u3051\u308b\u5468\u56f2\u306eODD\u3092\u89e3\u6790\u3059\u308b\u5834\u5408","text":"<p>\u3053\u306e\u5834\u5408\u306b\u306fRviz\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u3042\u308b<code>driving_environment_analyzer_rviz_panel</code>\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002</p> <p>\u73fe\u5728\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u51fa\u529b\u53ef\u80fd\u3067\u3059\u3002</p> <ul> <li>EGO\u306e\u73fe\u5728\u8eca\u901f</li> <li>\u73fe\u5728\u4f4d\u7f6e\u306e\u52fe\u914d</li> <li>EGO\u306e\u6319\u52d5</li> <li>\u73fe\u5728\u306e\u8eca\u7dda\u60c5\u5831</li> </ul> <p>\u3053\u3061\u3089\u306e\u30c4\u30fc\u30eb\u306fautoware_launch\u306b\u542b\u307e\u308c\u308b<code>logging_simulator</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305a\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u304b\u3089\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3092\u8d77\u52d5\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p><code>ros2 launch autoware_launch logging_simulator.launch.xml map_path:=&lt;MAP&gt; vehicle_model:=&lt;VEHICLE_NAME&gt; sensor_model:=&lt;AIP_NAME&gt; sensing:=false control:=false planning:=false perception:=false localization:=false system:=false</code></p> <p></p> <p>\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u8d77\u52d5\u6642\u306b\u5730\u56f3\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081ROSBAG\u306b\u5730\u56f3\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u304f\u3066\u3082ODD\u306e\u89e3\u6790\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u305f\u3060\u3057\u3001\u305d\u306e\u5834\u5408\u306b\u306fROSBAG\u53d6\u5f97\u306e\u969b\u306b\u4f7f\u7528\u3057\u305f\u5730\u56f3\u3092\u6307\u5b9a\u3057\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3092\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09</p> <p>\u6b21\u306b\u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u308b\u89e3\u6790\u30c4\u30fc\u30eb\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002Rviz\u753b\u9762\u5de6\u4e0a\u90e8\u306eAdd New Panel\u304b\u3089DrivingEnvironmentAnalyzerPanel\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3067Rviz\u5de6\u4e0b\u306b\u65b0\u3057\u304f\u64cd\u4f5c\u30d1\u30cd\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002</p> <p> </p> <p>\u672c\u30c4\u30fc\u30eb\u306fROSBAG\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u3057\u3066\u30ed\u30fc\u30c9\u3067\u304d\u308b\u4ed6\u3001\u8907\u6570\u306eROSBAG\u30d5\u30a1\u30a4\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u305d\u306e\u5834\u5408\u306b\u306f\u4e8b\u524d\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067<code>metadata.yaml</code>\u306e\u751f\u6210\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002</p> <p><code>ros2 bag reindex &lt;DIR_PATH&gt; sqlite3</code></p> <p></p> <p>ROSBAG\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u305f\u3089ODD\u3092\u89e3\u6790\u3057\u305f\u3044\u6642\u523b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u6642\u523b\u306e\u6307\u5b9a\u306b\u306fUnix time\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u307b\u304b\u30b9\u30e9\u30a4\u30c9\u30d0\u30fc\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\u5de6\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u65e5\u6642\u3092\u53c2\u8003\u306b\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p></p> <p>\u307e\u305f\u3001\u3053\u306e\u3068\u304dViews\u306eTarget Flame\u3092<code>base_link</code>\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305f\u6642\u523b\u306eEGO\u306e\u4f4d\u7f6e\u3068\u5468\u56f2\u306e\u72b6\u6cc1\u3092Rviz\u3067\u53ef\u8996\u5316\u53ef\u80fd\u3067\u3059\u3002</p> <p></p> <p>\u6642\u523b\u306e\u6307\u5b9a\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001<code>Set time stamp</code>\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001\u6700\u5f8c\u306b<code>Analyze dynamic ODD factor</code>\u3092\u62bc\u3059\u3053\u3068\u3067\u89e3\u6790\u304c\u59cb\u307e\u308a\u307e\u3059\u3002</p> <p></p> <pre><code>[rviz2-11] ***********************************************************\n[rviz2-11]                    ODD analysis result\n[rviz2-11] ***********************************************************\n[rviz2-11] Type: TIME SPECIFIED\n[rviz2-11] Time: 2024-04-22 14:48:05\n[rviz2-11]\n[rviz2-11]\n[rviz2-11] - EGO INFO\n[rviz2-11]   [SPEED]                       : 0 [m/s]\n[rviz2-11]   [ELEVATION ANGLE]             : 0.00963597 [rad]\n[rviz2-11]\n[rviz2-11] - EGO BEHAIOVR\n[rviz2-11]   [AVOIDANCE(R)]                : NONE\n[rviz2-11]   [AVOIDANCE(L)]                : NONE\n[rviz2-11]   [LANE_CHANGE(R)]              : NONE\n[rviz2-11]   [LANE_CHANGE(L)]              : NONE\n[rviz2-11]   [START_PLANNER]               : SAFE: true COMMAND: deactivate\n[rviz2-11]   [GOAL_PLANNER]                : NONE\n[rviz2-11]   [CROSSWALK]                   : NONE\n[rviz2-11]   [INTERSECTION]                : NONE\n[rviz2-11]\n[rviz2-11] - LANE INFO\n[rviz2-11]   [ID]                          : 176126\n[rviz2-11]   [WIDTH]                       : 4.24132 [m]\n[rviz2-11]   [SHAPE]                       : STRAIGHT\n[rviz2-11]   [RIGHT LANE NUM]              : 0\n[rviz2-11]   [LEFT LANE NUM]               : 0\n[rviz2-11]   [TOTAL LANE NUM]              : 1\n[rviz2-11]   [SAME DIRECTION LANE]         : NONE\n[rviz2-11]   [OPPOSITE DIRECTION LANE]     : NONE\n[rviz2-11]   [ROAD SHOULDER]               : EXIST\n[rviz2-11]\n[rviz2-11] - SURROUND OBJECT NUM\n[rviz2-11]   [UNKNOWN]                     : 0\n[rviz2-11]   [CAR]                         : 6\n[rviz2-11]   [TRUCK]                       : 0\n[rviz2-11]   [BUS]                         : 3\n[rviz2-11]   [TRAILER]                     : 2\n[rviz2-11]   [MOTORCYCLE]                  : 0\n[rviz2-11]   [BICYCLE]                     : 0\n[rviz2-11]   [PEDESTRIAN]                  : 7\n[rviz2-11] ***********************************************************\n</code></pre>"},{"location":"driving_environment_analyzer/#rosbagodd_1","title":"ROSBAG\u5168\u4f53\u306b\u5bfe\u3057\u3066\u7d4c\u8def\u6cbf\u3044\u306eODD\u3092\u89e3\u6790\u3059\u308b\u5834\u5408","text":"<p>\u73fe\u5728\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u51fa\u529b\u53ef\u80fd\u3067\u3059\u3002</p> <ul> <li>\u8d70\u884c\u7d4c\u8def\u306e\u9577\u3055</li> <li>\u8d70\u884c\u7d4c\u8def\u306e\u8eca\u7dda\u60c5\u5831</li> <li>\u8d70\u884c\u7d4c\u8def\u306e\u6700\u5927\u30fb\u6700\u5c0f\u52fe\u914d</li> <li>\u8d70\u884c\u7d4c\u8def\u306e\u6700\u5927\u66f2\u7387</li> <li>\u8d70\u884c\u7d4c\u8def\u306e\u6700\u5927\u30fb\u6700\u5c0f\u8eca\u7dda\u5e45</li> <li>\u4ea4\u5dee\u70b9\u306e\u6709\u7121</li> <li>\u4fe1\u53f7\u6a5f\u306e\u6709\u7121</li> <li>\u6a2a\u65ad\u6b69\u9053\u306e\u6709\u7121</li> </ul> <p>\u8d77\u52d5\u6642\u306b<code>bag_path</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u89e3\u6790\u3057\u305f\u3044ROSBAG\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6307\u5b9a\u3082.db3\u30d5\u30a1\u30a4\u30eb\u306e\u76f4\u63a5\u6307\u5b9a\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\uff09</p> <p>\u89e3\u6790\u306b\u5fc5\u8981\u306atopic\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\uff08\u4eca\u5f8c\u5897\u3048\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\uff09</p> <ul> <li><code>/planning/mission_planning/route</code></li> <li><code>/map/vector_map</code></li> </ul> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306blaunch\u3059\u308b\u3053\u3068\u3067ODD\u306e\u89e3\u6790\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p><code>ros2 launch driving_environment_analyzer driving_environment_analyzer.launch.xml use_map_in_bag:=true bag_path:=&lt;ROSBAG&gt;</code></p> <pre><code>[component_container-1] [INFO 1708999777.768870564] [driving_environment_analyzer]: ======================================\n[component_container-1] [INFO 1708999777.768922452] [driving_environment_analyzer]:  data is ready. start ODD analysis...\n[component_container-1] [INFO 1708999777.768933574] [driving_environment_analyzer]: ======================================\n[component_container-1] [INFO 1708999777.768967412] [driving_environment_analyzer]: - Length of total lanes : 2357.50 [m]\n[component_container-1] [INFO 1708999777.769031174] [driving_environment_analyzer]: - Length of lane that has adjacent lane : 2080.43 [m]\n[component_container-1] [INFO 1708999777.769076141] [driving_environment_analyzer]: - Length of lane that has opposite lane : 0.00 [m]\n[component_container-1] [INFO 1708999777.769101793] [driving_environment_analyzer]: - Length of lane that has no adjacent lane : 277.07 [m]\n[component_container-1] [INFO 1708999777.769225729] [driving_environment_analyzer]: - Min lane width: 3.14 [m] Max lane width: 4.94 [m]\n[component_container-1] [INFO 1708999777.769278698] [driving_environment_analyzer]: - Max curvature: 0.007967 [1/m]\n[component_container-1] [INFO 1708999777.769293161] [driving_environment_analyzer]: - Min curve radius: 125.52 [m]\n[component_container-1] [INFO 1708999777.769336094] [driving_environment_analyzer]: - Min elevation angle: -0.033037 [rad] Max elevation angle: 0.026073 [rad]\n[component_container-1] [INFO 1708999777.769403870] [driving_environment_analyzer]: - Min speed limit: 13.89 [m/s] Max speed limit: 16.67 [m/s]\n[component_container-1] [INFO 1708999777.769424648] [driving_environment_analyzer]: - Exist traffic light: true\n[component_container-1] [INFO 1708999777.769435813] [driving_environment_analyzer]: - Exist intersection: true\n[component_container-1] [INFO 1708999777.769620035] [driving_environment_analyzer]: - Exist crosswalk: true\n[component_container-1] [INFO 1708999777.769634980] [driving_environment_analyzer]: ======================================\n[component_container-1] [INFO 1708999777.769642769] [driving_environment_analyzer]:  complete ODD analysis. shutdown.\n[component_container-1] [INFO 1708999777.769650034] [driving_environment_analyzer]: ======================================\n</code></pre> <p>\u305f\u3060\u3057\u3001<code>map/vector_map</code>\u306b\u95a2\u3057\u3066\u306f<code>use_map_in_bag</code>\u3092<code>false</code>\u306b\u3059\u308b\u3053\u3068\u3067\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5730\u56f3\u3092\u4f7f\u7528\u3057\u3066ODD\u89e3\u6790\u3092\u884c\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u305d\u306e\u5834\u5408\u3001<code>map_path</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5730\u56f3\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p><code>ros2 launch driving_environment_analyzer driving_environment_analyzer.launch.xml use_map_in_bag:=false map_path:=&lt;MAP&gt; bag_path:=&lt;ROSBAG&gt;</code></p> <p>\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067ROSBAG\u306b\u5730\u56f3\u60c5\u5831\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u3082ODD\u89e3\u6790\u304c\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"evaluation/tier4_metrics_rviz_plugin/","title":"tier4_metrics_rviz_plugin","text":""},{"location":"evaluation/tier4_metrics_rviz_plugin/#tier4_metrics_rviz_plugin","title":"tier4_metrics_rviz_plugin","text":""},{"location":"evaluation/tier4_metrics_rviz_plugin/#purpose","title":"Purpose","text":"<p>This plugin panel to visualize <code>planning_evaluator</code> output.</p>"},{"location":"evaluation/tier4_metrics_rviz_plugin/#inputs-outputs","title":"Inputs / Outputs","text":"Name Type Description <code>/planning/planning_evaluator/metrics</code> <code>diagnostic_msgs::msg::DiagnosticArray</code> Subscribe <code>planning_evaluator</code> output"},{"location":"evaluation/tier4_metrics_rviz_plugin/#howtouse","title":"HowToUse","text":"<ol> <li>Start rviz and select panels/Add new panel.</li> <li>Select MetricsVisualizePanel and press OK.</li> </ol>"},{"location":"localization/deviation_estimation_tools/ReadMe/","title":"deviation_estimation_tools","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#deviation_estimation_tools","title":"deviation_estimation_tools","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#1-quick-start","title":"1. Quick start","text":"<p>This repository consists of three main tools implemented on ROS 2.</p> <ol> <li>Deviation Estimator</li> <li>Deviation Evaluator</li> <li>Deviation Evaluation Visualizer</li> </ol>"},{"location":"localization/deviation_estimation_tools/ReadMe/#a-estimation-step","title":"A. Estimation step","text":"<p>Here you estimate the following parameters using <code>deviation_estimator</code>.</p> <ul> <li>the standard deviation of velocity and yaw rate</li> <li>the bias of velocity and yaw rate</li> </ul> <p>Launch the node with the following command. Make sure you set the correct parameters (see Sec. 2).</p> <pre><code>ros2 launch deviation_estimator deviation_estimator.launch.xml\n</code></pre> <p>Then, you need to run either ROS bag or <code>autoware_launch</code> to provide <code>pose</code> and <code>twist</code> to <code>deviation_estimator</code>.</p> <p>If you are using rosbag, it should contain the following topics:</p> <ul> <li>Raw IMU data (default: <code>/sensing/imu/tamagawa/imu_raw</code>)</li> <li>Raw velocity data (default: <code>/vehicle/status/velocity_status</code>)</li> <li><code>/localization/pose_estimator/pose_with_covariance</code></li> <li><code>/clock</code></li> <li><code>/tf_static</code> (that contains transform from <code>base_link</code> to <code>imu_link</code>)</li> </ul> <p>NOTE that the pose and twist must be estimated with default parameters (see <code>known issues</code> section for detail).</p> <p>Play the rosbag in a different terminal:</p> <pre><code>ros2 bag play YOUR_BAG # You can also play in a faster rate, e.g. -r 5\n</code></pre> <p>You can check the results in the following three output files:</p> <ol> <li>IMU parameters (default: <code>$HOME/imu_corrector.param.yaml</code>)</li> <li>Velocity parameters (default: <code>$HOME/vehicle_velocity_converter.param.yaml</code>)</li> <li>Logs (default: <code>$HOME/output.txt</code>)</li> </ol> sample input (rosbag) <p> </p><pre><code>Files:             localized_sensors_0.db3\nBag size:          9.6 MiB\nStorage id:        sqlite3\nDuration:          76.539s\nStart:             Jul  8 2022 11:21:41.220 (1657246901.220)\nEnd:               Jul  8 2022 11:22:57.759 (1657246977.759)\nMessages:          32855\nTopic information: Topic: /localization/pose_estimator/pose_with_covariance | Type: geometry_msgs/msg/PoseWithCovarianceStamped | Count: 2162 | Serialization Format: cdr\n                   Topic: /clock | Type: rosgraph_msgs/msg/Clock | Count: 57309 | Serialization Format: cdr\n                   Topic: /tf_static | Type: tf2_msgs/msg/TFMessage | Count: 2 | Serialization Format: cdr\n                   Topic: /sensing/imu/tamagawa/imu_raw | Type: sensor_msgs/msg/Imu | Count: 8076 | Serialization Format: cdr\n                   Topic: /vehicle/status/velocity_status | Type: autoware_vehicle_msgs/msg/VelocityReport | Count: 8275 | Serialization Format: cdr\n</code></pre> sample output (output.txt) <p> </p><pre><code># Validation results\n# value: [min, max]\n[OK] coef_vx: [0.99538, 0.99593]\n[OK] stddev_vx: [0.17192, 0.19161]\n[OK] angular_velocity_offset_x: [-0.00742, -0.00727]\n[OK] angular_velocity_offset_y: [-0.00119, -0.00115]\n[OK] angular_velocity_offset_z: [0.00635, 0.00641]\n[OK] angular_velocity_stddev_xx: [0.04151, 0.04258]\n[OK] angular_velocity_stddev_yy: [0.04151, 0.04258]\n[OK] angular_velocity_stddev_zz: [0.04151, 0.04258]\n</code></pre> sample output (imu_corrector.param.yaml) <pre><code># Estimated by deviation_estimator\n/**:\n  ros__parameters:\n    angular_velocity_stddev_xx: 0.01798\n    angular_velocity_stddev_yy: 0.01798\n    angular_velocity_stddev_zz: 0.01798\n    angular_velocity_offset_x: -0.00952\n    angular_velocity_offset_y: -0.00095\n    angular_velocity_offset_z: 0.00607\n</code></pre> <p> </p> sample output (vehicle_velocity_converter.param.yaml) <pre><code># Estimated by deviation_estimator\n/**:\n  ros__parameters:\n    speed_scale_factor: 0.99507\n    velocity_stddev_xx: 0.16708\n    velocity_stddev_xx: 0.1 # Default value\nframe_id: base_link # Default value\n</code></pre> <p> </p> unit tool  If you build normally, a binary will be generated under `install/deviation_estimator/lib/`.  <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release --packages-up-to deviation_estimator\nsource ~/autoware/install/setup.bash\n~/autoware/install/deviation_estimator/lib/deviation_estimator/deviation_estimator_unit_tool &lt;path_to_rosbag&gt;\n</code></pre> <p> </p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#b-evaluation-step","title":"B. Evaluation step","text":"<p>Here, you can evaluate the estimated standard deviation and bias using a package <code>deviation_evaluator</code>. Execute the following command:</p> <pre><code>ros2 launch deviation_evaluator deviation_evaluator.launch.xml map_path:=MAP_PATH rviz:=true in_imu:=YOUR_IMU_TOPIC_NAME in_wheel_odometry:=YOUR_VELOCITY_TOPIC_NAME\nros2 bag play YOUR_BAG\n</code></pre>"},{"location":"localization/deviation_estimation_tools/ReadMe/#c-visualization-step","title":"C. Visualization step","text":"<p>After the evaluation, run the following command to generate the final results in <code>$HOME/deviation_evaluator_sample</code>.</p> <pre><code>pip3 install -r requirements.txt\nros2 launch deviation_evaluator deviation_evaluation_visualizer.launch.xml\n</code></pre> <p>Done!</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#2-description-of-deviation-estimator","title":"2. Description of Deviation Estimator","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#overview","title":"Overview","text":"<p>The Deviation Estimator estimates the standard deviation and bias for velocity and yaw bias, by comparing the velocity and gyro observations with ground truth poses (e.g. from LiDAR-based localization).</p> <p>Here are some assumptions made for input data:</p> <ul> <li>The data should have accurate localization results. It doesn't need to be strictly precise, but data that is obviously incorrect should be avoided. In case of NDT in Autoware, it should not have any TP or NVTL warnings from the ndt_scan_matcher.</li> <li>The data should cover a reasonable duration of driving. A few minutes of data is sufficient. It is desirable to have a distance of approximately 500 meters. (For example, around 2 minutes at a speed of 15 km/h).</li> <li>The data should include sections of driving in a straight line. This is necessary for estimating velocity-related parameters. Having at least one minute of straight line driving is enough.</li> <li>The data should cover the expected speed range during operation.</li> <li>[Optional] Ideally, the data should be recorded as recently as possible. Especially in cases where IMU or tire replacement has occurred, data recorded before those changes may not provide accurate estimations.</li> <li>[Optional] The data should cover various driving behaviors expected during operation, such as right turns, left turns, acceleration, and deceleration.</li> </ul>"},{"location":"localization/deviation_estimation_tools/ReadMe/#launch","title":"Launch","text":"<p>The <code>deviation_estimator</code> can be launched with the following command.</p> <pre><code>ros2 launch deviation_estimator deviation_estimator.launch.xml\nros2 bag play YOUR_BAG # You can also play in a faster rate, e.g. -r 5\n</code></pre> <p>The parameters and input topic names can be seen in the <code>deviation_estimator.launch.xml</code> file. <code>YOUR_BAG</code> should include all the required inputs written below.</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#input","title":"Input","text":"Name Type Description <code>in_pose_with_covariance |</code>geometry_msgs::msg::PoseWithCovarianceStamped` Input pose <code>in_imu</code> <code>sensor_msgs::msg::Imu</code> Input IMU data <code>in_wheel_odometry</code> <code>autoware_vehicle_msgs::msg::VelocityReport</code> Input wheel odometry"},{"location":"localization/deviation_estimation_tools/ReadMe/#output","title":"Output","text":"Name Type Description <code>/estimated_stddev_vx</code> <code>std_msgs::msg::Float64</code> estimated standard deviation of vx <code>/estimated_stddev_angular_velocity</code> <code>geometry_msgs/msg/Vector3</code> estimated standard deviation of angular velocity <code>/estimated_coef_vx</code> <code>std_msgs::msg::Float64</code> coef of vx <code>/estimated_bias_angular_velocity</code> <code>geometry_msgs/msg/Vector3</code> bias of angular velocity"},{"location":"localization/deviation_estimation_tools/ReadMe/#parameters-for-deviation-estimator","title":"Parameters for deviation estimator","text":"Name Type Description Default value show_debug_info bool Flag to display debug info true t_design double Maximum expected duration of dead-reckoning [s] 10.0 x_design double Maximum expected trajectory length of dead-reckoning [m] 30.0 time_window double Estimation period [s] 4.0 results_dir string Text path where the estimated results will be stored \"$(env HOME)\" gyro_estimation.only_use_straight bool Flag to use only straight sections for gyro estimation true gyro_estimation.only_use_moving bool Flag to use only moving sections for gyro estimation true gyro_estimation.only_use_constant_velocity bool Flag to use only constant velocity sections for gyro estimation true velocity_estimation.only_use_straight bool Flag to use only straight sections for velocity estimation true velocity_estimation.only_use_moving bool Flag to use only moving sections for velocity estimation true velocity_estimation.only_use_constant_velocity bool Flag to use only constant velocity sections for velocity estimation true"},{"location":"localization/deviation_estimation_tools/ReadMe/#functions","title":"Functions","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#bias-estimation","title":"Bias estimation","text":"<p>By assuming that the pose information is a ground truth, the node estimates the bias of velocity and yaw rate.</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#standard-deviation-estimation","title":"Standard deviation estimation","text":"<p>The node also estimates the standard deviation of velocity and yaw rate. This can be used as a parameter in <code>ekf_localizer</code>. Note that the final estimation takes into account the bias.</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#3-description-of-deviation-evaluator","title":"3. Description of Deviation Evaluator","text":"<p>You can use <code>deviation_evaluator</code> for evaluating the estimated standard deviation parameters. This can be run with the following command:</p> <pre><code>ros2 launch deviation_evaluator deviation_evaluator.launch.xml map_path:=MAP_PATH rviz:=true in_imu:=YOUR_IMU_TOPIC_NAME in_wheel_odometry:=YOUR_VELOCITY_TOPIC_NAME\nros2 bag play YOUR_BAG\n</code></pre> <p>All the ros2bag and config files will be stored in <code>$HOME/deviation_evaluator_sample</code> (you can change this with <code>save_dir</code> parameter in the launch file).</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#features","title":"Features","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#a-visualization-of-confidence-ellipse","title":"A. Visualization of confidence ellipse","text":"<p><code>deviation_evaluator</code> supports rviz visualization. To use this feature, set <code>rviz:=true</code> and <code>map_path:=/path/to/map_folder</code>.</p> <p> </p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#b-check-the-compatibility-with-a-threshold-in-localization_error_monitor","title":"B. Check the compatibility with a threshold in <code>localization_error_monitor</code>","text":"<p>The <code>deviation_evaluator</code> also checks the compatibility of the estimated parameters and the threshold in <code>localization_error_monitor</code>.</p> <p>Concretely, it checks if the two following statement holds:</p> <ol> <li><code>localization_error_monitor</code> would NOT diagnose the system as <code>WARN</code> nor <code>ERROR</code> as long as the NDT is available.</li> <li><code>localization_error_monitor</code> detects the anomaly with a recall over 0.99.</li> </ol> <p>Given the result of this validation, the users can verify that the estimated parameters in <code>deviation_estimator</code> can be safely applied to Autoware.</p> <p>Here, note that the <code>localization_error_monitor</code> treat the system as an anomaly if either of error along long-axis of confidence ellipse or error along lateral direction is over threshold. Please refer to the package in autoware.universe for detail.</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#architecture-of-deviation_evaluator","title":"Architecture of <code>deviation_evaluator</code>","text":"<p>The architecture of <code>deviation_evaluator</code> is shown below. It launches two <code>ekf_localizer</code>, one for ground truth estimation and one for (partially) dead reckoning estimation. Outputs of both <code>ekf_localizer</code> will be recorded and analyzed with <code>deviation_evaluation_visualizer</code>.</p> <p> </p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#inputs-outputs_1","title":"Inputs / Outputs","text":""},{"location":"localization/deviation_estimation_tools/ReadMe/#input_1","title":"Input","text":"Name Type Description <code>in_ndt_pose_with_covariance</code> <code>geometry_msgs::msg::PoseWithCovarianceStamped</code> Input pose <code>in_ekf_dr_odom</code> <code>nav_msgs::msg::Odometry</code> dead-reckoning EKF outputs <code>in_ekf_gt_odom</code> <code>nav_msgs::msg::Odometry</code> ground-truth EKF outputs"},{"location":"localization/deviation_estimation_tools/ReadMe/#output_1","title":"Output","text":"Name Type Description <code>out_pose_with_covariance_dr</code> <code>geometry_msgs::msg::PoseWithCovarianceStamped</code> Output pose (for dead reckoning <code>ekf_localizer</code>) <code>out_pose_with_covariance_gt</code> <code>geometry_msgs::msg::PoseWithCovarianceStamped</code> Output pose (for ground truth <code>ekf_localizer</code>) <code>out_initial_pose_with_covariance</code> <code>geometry_msgs::msg::PoseWithCovarianceStamped</code> Output initial pose (for both <code>ekf_localizer</code>)"},{"location":"localization/deviation_estimation_tools/ReadMe/#parameters-for-deviation-evaluator","title":"Parameters for deviation evaluator","text":"Name Type Description Default value rviz bool Show rviz if true false map_path string Path to the directory where map data (OpenStreetMap or .osm data) is saved \"\" save_dir string Output directory where figures, parameter files, and scores are saved \"$(env HOME)/deviation_evaluator_sample\" period double [s] Duration of cycle 10 (in <code>config/deviation_evaluator.yaml</code>) cut double [s] Duration of ndt-cut-off 9 (in <code>config/deviation_evaluator.yaml</code>)"},{"location":"localization/deviation_estimation_tools/ReadMe/#4-reflect-the-estimated-parameters-in-autoware","title":"4. Reflect the estimated parameters in Autoware","text":"<p>The results of <code>deviation_estimator</code> is stored in two scripts:</p> <ul> <li><code>imu_corrector</code> param file (default: <code>$HOME/imu_corrector.param.yaml</code>)</li> <li><code>vehicle_velocity_converter</code> param file (default: <code>$HOME/vehicle_velocity_converter.param.yaml</code>)</li> </ul> <p>Please modify your Autoware configuration so that it will launch using the above two parameter files.</p>"},{"location":"localization/deviation_estimation_tools/ReadMe/#5-known-issues","title":"5. Known issues","text":"<ul> <li>The plot of <code>deviation_evaluator.png</code> generated by <code>deviation_evaluation_visualizer</code> may diverge, possibly due to the large covariance caused by a failure in localization.</li> <li><code>ekf_localizer</code> in <code>deviation_evaluator</code> may not start properly. As for now, please launch <code>deviation_evaluator</code> first and then run <code>ros2 bag play</code> to provide pose and twist data.</li> </ul>"},{"location":"map/autoware_lanelet2_map_utils/","title":"autoware_lanelet2_map_utils","text":""},{"location":"map/autoware_lanelet2_map_utils/#autoware_lanelet2_map_utils","title":"autoware_lanelet2_map_utils","text":"<p>This package is for preprocessing the lanelet map.</p>"},{"location":"map/autoware_lanelet2_map_validator/","title":"autoware_lanelet2_map_validator","text":""},{"location":"map/autoware_lanelet2_map_validator/#autoware_lanelet2_map_validator","title":"autoware_lanelet2_map_validator","text":"<p><code>autoware_lanelet2_map_validator</code> is a tool to validate Lanelet2 maps to ensure that Autoware can work properly with it.</p> <p>This validation tool is an extension of lanelet2_validation so that Autoware specific rules can be applied. As you can see from the codes in the <code>src/validators</code> directory, the group of validators belong to this tool inherits the lanelet::validation::MapValidator class from the original <code>lanelet2_validation</code>. Therefore, we believe that reading the source code of the <code>lanelet2_validation</code> will help you understand this tool better.</p> <p>Note that this validator is still on construction that there are only a few rules and a template to define those rules.</p> <p>The official Autoware requirements for lanelet2 maps are described in Vector Map creation requirement specifications (in Autoware Documentation).</p>"},{"location":"map/autoware_lanelet2_map_validator/#design-concept","title":"Design concept","text":"<p>The <code>autoware_lanelet2_map_validator</code> is designed to validate <code>.osm</code> map files by using and extending the lanelet2_validation package for Autoware.</p> <p><code>autoware_lanelet2_map_validator</code> takes the lanelet2 map (.osm file) and requirement set (JSON file, optional) as the input, and output validation results to the console.</p> <p>If a requirement set is given, <code>autoware_lanelet2_map_validator</code> also outputs validation results reflecting the input requirement set. See \"Run with a requirement set\" for further information, \"Input file\" to understand the input format, and \"Output file\" to understand the output format.</p> <p></p>"},{"location":"map/autoware_lanelet2_map_validator/#how-to-use","title":"How to use","text":"<p>Basically, you can use the following command to execute <code>autoware_lanelet2_map_validator</code>. However, note that <code>autoware_lanelet2_map_validator</code> is a ROS/rclcpp free tool, so you can just run the built executable whatever way.</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator\n</code></pre>"},{"location":"map/autoware_lanelet2_map_validator/#run-all-validators","title":"Run ALL validators","text":"<p>You can use <code>autoware_lanelet2_map_validator</code> with the following command. This will run all validators including the default built-in validators in the lanelet2_validation.</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator --map_file &lt;absolute_or_relative_path/to_your/lanelet2_map.osm&gt; --projector mgrs\n</code></pre>"},{"location":"map/autoware_lanelet2_map_validator/#run-a-specific-validator","title":"Run a specific validator","text":"<p><code>autoware_lanelet2_map_validator</code> consists of multiple small validators in order to realize complex requirements with a combination of them. If you want to call a few validators, you can select them with the <code>--validator, -v</code> option.</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator --map_file path/to_your/lanelet2_map.osm --projector mgrs --validator mapping.traffic_light.missing_regulatory_elements\n</code></pre> <p>You can get a list of available validators with the <code>--print</code> option. (<code>-p</code> is for <code>--projector</code>)</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator --print\n</code></pre>"},{"location":"map/autoware_lanelet2_map_validator/#run-with-a-requirement-set","title":"Run with a requirement set","text":"<p><code>autoware_lanelet2_map_validator</code> can manage to run a group of validators by a list of validator names. <code>autoware_lanelet2_map_validator</code> will scan through the input JSON file given by the <code>--input_requirements, -i</code> option, and output the validation results to the directory given by the <code>--output_directory, -o</code> option. The output filename will be <code>lanelet2_validation_results.json</code>.</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator --map_file &lt;absolute_or_relative_path/to_your/lanelet2_map.osm&gt; --projector mgrs --input_requirements &lt;absolute_or_relative_path_to_autoware_requirement_set.json&gt; --output_directory ./\n</code></pre> <p>(Short version)</p> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator -m &lt;absolute_or_relative_path/to_your/lanelet2_map.osm&gt; -p mgrs -i &lt;absolute_or_relative_path_to_autoware_requirement_set.json&gt; -o ./\n</code></pre>"},{"location":"map/autoware_lanelet2_map_validator/#input-file","title":"Input file","text":"<p>The JSON file input should follow the structure like this example.</p> <pre><code>{\n\"requirements\": [\n{\n\"id\": \"vm-02-02\",\n\"validators\": [\n{\n\"name\": \"mapping.stop_line.missing_regulatory_elements\"\n}\n]\n},\n{\n\"id\": \"vm-04-01\",\n\"validators\": [\n{\n\"name\": \"mapping.crosswalk.missing_regulatory_elements\"\n},\n{\n\"name\": \"mapping.crosswalk.regulatory_element_details\",\n\"prerequisites\": [\n{\n\"name\": \"mapping.crosswalk.missing_regulatory_elements\"\n}\n]\n}\n]\n},\n{\n\"id\": \"vm-05-01\",\n\"validators\": [\n{\n\"name\": \"mapping.traffic_light.missing_regulatory_elements\"\n},\n{\n\"name\": \"mapping.traffic_light.regulatory_element_details\",\n\"prerequisites\": [\n{\n\"name\": \"mapping.traffic_light.missing_regulatory_elements\"\n}\n]\n}\n]\n}\n]\n}\n</code></pre> <ul> <li>MUST have a single <code>requirements</code> field.</li> <li>The <code>requirements</code> field MUST be a list of requirements. A requirement MUST have<ul> <li><code>id</code> : The id of the requirement. Its name is arbitrary.</li> <li><code>validators</code> : A list of validators that structures the requirement.<ul> <li>A validator MUST be given with its name on the <code>name</code> field.</li> <li>The name list of available validators can be obtained from the <code>--print</code> option.</li> <li>You can add a list of <code>prerequisites</code> to each validator. Then, the validator will only be run when the prerequisites pass the validation.</li> <li>In the <code>prerequisites</code> field, you can add <code>forgive_warnings: true</code> in order to run the validator even if the prerequisites output warning issues. (Error issues from prerequisites will still skip the validation.). Note that NOT writing the <code>forgive_warnings</code> field and writing <code>forgive_warnings: false</code> means the same.</li> </ul> </li> </ul> </li> <li>The user can write any other field (like <code>version</code>) besides <code>requirements</code>.</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/#output-file","title":"Output file","text":"<p>When the <code>input_requirements</code> is thrown to <code>autoware_lanelet2_map_validator</code>, it will output a <code>lanelet2_validation_results.json</code> file which looks like the following example.</p> <pre><code>{\n\"requirements\": [\n{\n\"id\": \"vm-02-02\",\n\"passed\": true,\n\"validators\": [\n{\n\"name\": \"mapping.stop_line.missing_regulatory_elements\",\n\"passed\": true\n}\n]\n},\n{\n\"id\": \"vm-04-01\",\n\"passed\": false,\n\"validators\": [\n{\n\"issues\": [\n{\n\"id\": 163,\n\"issue_code\": \"Crosswalk.MissingRegulatoryElements-001\",\n\"message\": \"No regulatory element refers to this crosswalk.\",\n\"primitive\": \"lanelet\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 164,\n\"issue_code\": \"Crosswalk.MissingRegulatoryElements-001\",\n\"message\": \"No regulatory element refers to this crosswalk.\",\n\"primitive\": \"lanelet\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 165,\n\"issue_code\": \"Crosswalk.MissingRegulatoryElements-001\",\n\"message\": \"No regulatory element refers to this crosswalk.\",\n\"primitive\": \"lanelet\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 166,\n\"issue_code\": \"Crosswalk.MissingRegulatoryElements-001\",\n\"message\": \"No regulatory element refers to this crosswalk.\",\n\"primitive\": \"lanelet\",\n\"severity\": \"Error\"\n}\n],\n\"name\": \"mapping.crosswalk.missing_regulatory_elements\",\n\"passed\": false\n},\n{\n\"issues\": [\n{\n\"id\": 0,\n\"issue_code\": \"General.PrerequisitesFailure-001\",\n\"message\": \"Prerequisites didn't pass\",\n\"primitive\": \"primitive\",\n\"severity\": \"Error\"\n}\n],\n\"name\": \"mapping.crosswalk.regulatory_element_details\",\n\"passed\": false,\n\"prerequisites\": [\n{\n\"name\": \"mapping.crosswalk.missing_regulatory_elements\"\n}\n]\n}\n]\n},\n{\n\"id\": \"vm-05-01\",\n\"passed\": false,\n\"validators\": [\n{\n\"name\": \"mapping.traffic_light.missing_regulatory_elements\",\n\"passed\": true\n},\n{\n\"issues\": [\n{\n\"id\": 9896,\n\"issue_code\": \"TrafficLight.MissingRegulatoryElements-001\",\n\"message\": \"Regulatory element of traffic light must have a stop line(ref_line).\",\n\"primitive\": \"regulatory element\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 9918,\n\"issue_code\": \"TrafficLight.MissingRegulatoryElements-001\",\n\"message\": \"Regulatory element of traffic light must have a stop line(ref_line).\",\n\"primitive\": \"regulatory element\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 9838,\n\"issue_code\": \"TrafficLight.MissingRegulatoryElements-001\",\n\"message\": \"Regulatory element of traffic light must have a stop line(ref_line).\",\n\"primitive\": \"regulatory element\",\n\"severity\": \"Error\"\n},\n{\n\"id\": 9874,\n\"issue_code\": \"TrafficLight.MissingRegulatoryElements-001\",\n\"message\": \"Regulatory element of traffic light must have a stop line(ref_line).\",\n\"primitive\": \"regulatory element\",\n\"severity\": \"Error\"\n}\n],\n\"name\": \"mapping.traffic_light.regulatory_element_details\",\n\"passed\": false,\n\"prerequisites\": [\n{\n\"name\": \"mapping.traffic_light.missing_regulatory_elements\"\n}\n]\n}\n]\n}\n]\n}\n</code></pre> <ul> <li><code>lanelet2_validation_results.json</code> inherits the JSON file of <code>input_requirements</code> and add results to it.<ul> <li>So additional input information not related to this validator also remains in the output.</li> </ul> </li> <li><code>autoware_lanelet2_map_validator</code> adds a boolean <code>passed</code> field to each requirement. If all validators of the requirement have been passed, the <code>passed</code> field of the requirement will be <code>true</code> (<code>false</code> if not).</li> <li>The <code>passed</code> field is also given to each validator. If the validator found any issues the <code>passed</code> field will turn to be <code>false</code> (<code>true</code> if not), and adds an <code>issues</code> field which is a list of issues found. Each issue contains information of <code>severity</code>, <code>primitive</code>, <code>id</code>, <code>message</code> and <code>issue_code</code>.</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/#available-command-options","title":"Available command options","text":"option description <code>-h, --help</code> Explains about this tool and show a list of options <code>--print</code> Print all available checker without running them <code>-m, --map_file</code> Path to the map to be validated <code>-i, --input_requirements</code> Path to the JSON file where the list of requirements and validations is written <code>-o, --output_directory</code> Directory to save the list of validation results in a JSON format <code>-v, --validator</code> Comma separated list of regexes to filter the applicable validators. Will run all validators by default. Example: <code>mapping.*</code> to run all checks for the mapping <code>-p, --projector</code> Projector used for loading lanelet map. Available projectors are: <code>mgrs</code>, <code>utm</code>, and <code>transverse_mercator</code>. <code>-l, --location</code> Location of the map (for instantiating the traffic rules), e.g. de for Germany <code>--participants</code> Participants for which the routing graph will be instantiated (default: vehicle) <code>--lat</code> latitude coordinate of map origin. This is required for the transverse mercator and utm projector. <code>--lon</code> longitude coordinate of map origin. This is required for the transverse mercator and utm projector."},{"location":"map/autoware_lanelet2_map_validator/#available-validators","title":"Available validators","text":"<p>Since there will be hundreds of validators in the future, the documents for each validator should categorized in the docs file. The directory structure should be the same to that of the <code>src/validators</code> directory.</p>"},{"location":"map/autoware_lanelet2_map_validator/#stop-line","title":"Stop Line","text":"<ul> <li>mapping.stop_line.missing_regulatory_elements</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/#traffic-light","title":"Traffic Light","text":"<ul> <li>mapping.traffic_light.missing_regulatory_elements</li> <li>mapping.traffic_light.regulatory_element_details</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/#crosswalk","title":"Crosswalk","text":"<ul> <li>mapping.crosswalk.missing_regulatory_elements</li> <li>mapping.crosswalk.regulatory_element_details</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/#how-to-add-a-new-validator","title":"How to add a new validator","text":"<p>If you want to contribute to <code>autoware_lanelet2_map_validator</code>, please check out the how_to_contribute first.</p>"},{"location":"map/autoware_lanelet2_map_validator/#relationship-between-requirements-and-validators","title":"Relationship between requirements and validators","text":"<p>This is a table describing the correspondence between the validators that each requirement consists of. The \"Validators\" column will be blank if it hasn't be implemented.</p> ID Requirements Validators vm-01-01 Lanelet basics vm-01-02 Allowance for lane changes vm-01-03 Linestring sharing vm-01-04 Sharing of the centerline of lanes for opposing traffic vm-01-05 Lane geometry vm-01-06 Line position (1) (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-01-07 Line position (2) (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-01-08 Line position (3) (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-01-09 Speed limits vm-01-10 Centerline vm-01-11 Centerline connection (1) vm-01-12 Centerline connection (2) vm-01-13 Roads with no centerline (1) vm-01-14 Roads with no centerline (2) vm-01-15 Road shoulder vm-01-16 Road shoulder Linestring sharing vm-01-17 Side strip vm-01-18 Side strip Linestring sharing vm-01-19 Walkway vm-02-01 Stop line alignment (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-02-02 Stop sign mapping.stop_line.missing_regulatory_elements vm-03-01 Intersection criteria mapping.intersection.intersection_area_dangling_reference vm-03-02 Lanelet's turn direction and virtual vm-03-03 Lanelet width in the intersection vm-03-04 Lanelet creation in the intersection vm-03-05 Lanelet division in the intersection vm-03-06 Guide lines in the intersection vm-03-07 Multiple lanelets in the intersection vm-03-08 Intersection Area range mapping.intersection.intersection_area_validity, mapping.intersection.intersection_area_segment_type vm-03-09 Range of Lanelet in the intersection vm-03-10 Right of way (with signal) vm-03-11 Right of way (without signal) vm-03-12 Right of way supplements (Nothing to validate.) vm-03-13 Merging from private area, sidewalk vm-03-14 Road marking vm-03-15 Exclusive bicycle lane vm-04-01 Traffic light basics mapping.traffic_light.missing_regulatory_elements, mapping.traffic_light.regulatory_element_details, mapping.traffic_light.missing_referrers vm-04-02 Traffic light position and size mapping.traffic_light.correct_facing (TODO: Compare the light_bulb direction and traffic_light direction.) vm-04-03 Traffic light lamps vm-05-01 Crosswalks across the road mapping.crosswalk.missing_regulatory_elements, mapping.crosswalk.regulatory_element_details (TODO: handle cases against missing referrers) vm-05-02 Crosswalks with pedestrian signals vm-05-03 Deceleration for safety at crosswalks vm-05-04 Fences vm-06-01 Buffer Zone vm-06-02 No parking signs vm-06-03 No stopping signs vm-06-04 No stopping sections vm-06-05 Detection area vm-07-01 Vector Map creation range (Not possible to validate because real-world correspondence cannot be determined programmatically?) vm-07-02 Range of detecting pedestrians who enter the road (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-07-03 Guardrails, guard pipes, fences (Not possible to validate because real-world correspondence cannot be determined programmatically.) vm-07-04 Ellipsoidal height (Not possible to validate because real-world correspondence cannot be determined programmatically?)"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/","title":"How to contribute to autoware_lanelet2_map_validator","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#how-to-contribute-to-autoware_lanelet2_map_validator","title":"How to contribute to autoware_lanelet2_map_validator","text":"<p>Your contribution is welcome to achieve a broad view of validation for lanelet2 maps. This document gives you the instructions on how to add a validator to <code>autoware_lanelet2_map_validator</code>. Please take a look at the Design Concept and follow the Contribution Guide.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#design-concept","title":"Design Concept","text":"<p>The main goal of <code>autoware_lanelet2_map_validator</code> is to validate whether the lanelet2 map matches the vector map requirements for Autoware. <code>autoware_lanelet2_map_validator</code> achieves this by running a list of small validators. In other words, each vector map requirement will be validated by one or more validators. It is recommended to keep validators small and they don't have to be unique to a specific requirement so that we can broaden the expression of map requirements. (It doesn't mean that a validator should output only one kind of error!)</p> <p>The list of small validators will be defined as a JSON file (see <code>autoware_requirement_set.json</code> for an example), and the output will also be a JSON file that appends validation results to a copy of the input. See How to use <code>autoware_lanelet2_map_validator</code> for further information about how the input and output are processed.</p> <p></p> <p>Please note that the validators are categorized according to the vector map requirements written in the Autoware Documentation. If there are any suggestions for new categories please let the pull request (PR) reviewers know. The available categories as of now are</p> <ul> <li>Lane</li> <li>Stop line</li> <li>Intersection</li> <li>Traffic light</li> <li>Crosswalk</li> <li>Area</li> <li>Others</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#contribution-guide","title":"Contribution Guide","text":"<p>This section is aimed at contributors who want to add their own validators. If you want to change the core process of <code>autoware_lanelet2_map_validator</code>, please open a PR and discuss it with the maintainers.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#1-implement-your-validator","title":"1. Implement your validator","text":"<p><code>autoware_lanelet2_map_validator</code> is based on the Lanelet2 library provided by fzi-forschungszentrum-informatik.</p> <p>Contributors are encouraged to make their validators by following the class structure shown in <code>validator_template.cpp</code> and <code>validator_template.hpp</code>.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#create_new_validatorpy-may-be-useful","title":"<code>create_new_validator.py</code> may be useful","text":"<p>You can use the script <code>create_new_validator.py</code> to generate the required files below.</p> <ul> <li>Source codes (cpp and hpp)</li> <li>Test code (cpp)</li> <li>Document file (md)</li> </ul> <p>You can use this by the command like this example:</p> <pre><code>create_new_validator.py \\\n--base_directory ./ \\\n--category_name traffic_light \\\n--code_name traffic_light_facing \\\n--class_name TrafficLightFacingValidator \\\n--validator_name mapping.traffic_light.correct_facing \\\n--check_function_name check_traffic_light_facing\n</code></pre> <p>OR</p> <pre><code>ros2 run autoware_lanelet2_map_validator create_new_validator.py \\\n--base_directory ./ \\\n--category_name traffic_light \\\n--code_name traffic_light_facing \\\n--class_name TrafficLightFacingValidator \\\n--validator_name mapping.traffic_light.correct_facing \\\n--check_function_name check_traffic_light_facing\n</code></pre> <p>All arguments are required.</p> <ul> <li><code>--base_directory</code>: The directory to the <code>autoware_lanelet2_map_validator</code> package.</li> <li><code>--category_name</code>: The category (like lanelet, traffic_light...) where your validator belongs to. Look Design Concept to see the list of categories.</li> <li><code>--code_name</code>: The name for the files. The source code names will be like <code>&lt;code_name&gt;.cpp</code> and <code>&lt;code_name.hpp&gt;</code></li> <li><code>--class_name</code>: The base class name of your validator which will be defined in your new header file.</li> <li><code>--validator_name</code>: The name of the validator which will be displayed when <code>autoware_lanelet2_map_validator</code> is executed with a <code>--print</code> option. The naming rules are explained in Restrictions for validator class implementation.</li> <li><code>--check_function_name</code>: The main function name of your validator which will be defined in your header file, and its implementation will be written in the cpp source file.</li> </ul> <p>It may be quicker to recognize what this script do by trying the command out. If you feel typing these arguments exhausting, you can overwrite the <code>default</code> value in the python script, but do not forget not to commit those changes.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#restrictions-for-path-structure","title":"Restrictions for path structure","text":"<ul> <li>The source file (<code>.cpp</code>) must belong to <code>src/validators/\\&lt;CATEGORY\\&gt;/</code></li> <li>Avoid source file names that are the same as those in other categories.</li> <li>The header file (<code>.hpp</code>) must belong to <code>src/include/lanelet2_map_validator/validators/\\&lt;CATEGORY\\&gt;/</code></li> <li>Currently, there are no naming rules for source and header files, but the pair of source and header files should have the same name.</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#restrictions-for-validator-class-implementation","title":"Restrictions for validator class implementation","text":"<ul> <li>Define the name of the validator in the header file (<code>.hpp</code> file).<ul> <li>The name must follow the structure <code>aaa.bbb.ccc</code><ul> <li>The first part (<code>aaa</code>) must be either <code>mapping</code>, <code>routing</code> or <code>rule</code></li> <li>The second part (<code>bbb</code>) should be either <code>general</code>, <code>lane</code>, <code>stop_line</code>, <code>intersection</code>, <code>traffic_light</code>, <code>crosswalk</code>, <code>area</code>, <code>others</code>.</li> <li>The third part can be anything, as long as it is not hard to recognize the validator's feature.</li> </ul> </li> <li>The issue code of the validator will be generated from this name. It removes the first part of the name, converts it to upper camel case, and adds a number for classification. (e. g. <code>Bbb.Ccc-001</code>)</li> </ul> </li> <li>Write your implementation in the <code>operator()</code> function that outputs an Issues (a.k.a vector\\&lt;Issue&gt;) object. Not all of the implementation has to be written in the operator; you can privately define and use functions in your validator class.</li> <li>Since <code>autoware_lanelet2_map_validator</code> outputs issue codes, please add an issue code prefix with square brackets on top of your issue message.<ul> <li>You may use the <code>append_issue_code_prefix</code> function to generate the issue code prefix.</li> <li>Even if the validator only detects a single type of issue, please include the number <code>001</code> to your issue code.</li> <li>The issue code must correspond to the issue message one-to-one.</li> </ul> </li> <li>Currently, there are no rules to decide the severity of the issue. If you're not confident about your severity decisions please discuss them with your PR reviewers.</li> <li>Other coding rules are mentioned in the Autoware Documentation. However, this coding rule doesn't hold if it conflicts with the Lanelet2 library.</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#2-write-a-test-code","title":"2. Write a test code","text":"<p>Contributors must also provide test codes to ensure your validator is working properly and be able to be tested again when changes occur to the validator in the future.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#restrictions-for-path-structure_1","title":"Restrictions for path structure","text":"<ul> <li>The source code (<code>.cpp</code>) must belong to <code>test/src/</code>.<ul> <li>The test codes are not categorized because there are few codes, but they might be categorized in the future.</li> </ul> </li> <li>The source code name should be <code>test_&lt;ORIGINAL_SOURCE_NAME&gt;.cpp</code></li> <li>The maps (<code>.osm</code>) for testing must belong to <code>test/data/map/\\&lt;CATEGORY\\&gt;/</code></li> <li>The JSON files (<code>.json</code>) for testing must belong to <code>test/data/json/</code></li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#restrictions-for-test-code-implementation","title":"Restrictions for test code implementation","text":"<ul> <li>Tests should be executable by <code>colcon test</code>. It is strongly recommended to use the gtest (googletest) format.</li> <li>If possible, the <code>MapValidationTester</code> class may be useful to inherit common map loading process.</li> <li>The test code must contain the following.<ul> <li>A test function that checks whether the validator is available.</li> <li>A test function for each unique issue the validator can detect. It is recommended to create a small lanelet2 map for each unique issue.<ul> <li>In this test, please also check that the issue code is emitted as expected.</li> </ul> </li> <li>A test function ensuring that no issues occur when validating <code>test/data/map/sample_map.osm</code>. If <code>sample_map.osm</code> violates the validation or doesn't contain the primitive to validate, please fix or add the primitives to it.</li> </ul> </li> <li>Add the test code to <code>CMakeLists.txt</code> using the <code>add_validation_test</code> function.<ul> <li>Currently, this part must be added to CMakeLists.txt manually. Automation is expected in the future.</li> </ul> </li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#3-test-the-entire-validator","title":"3. Test the entire validator","text":"<p>Please check that the <code>autoware_lanelet2_map_validator</code> works perfectly.</p> <ol> <li>Execute <code>colcon test --packages-select autoware_lanelet2_map_validator --event-handlers console_cohesion+</code> and confirm that all tests pass.</li> <li>Execute the following command and confirm that no issues appear.</li> </ol> <pre><code>ros2 run autoware_lanelet2_map_validator autoware_lanelet2_map_validator -p mgrs -m &lt;PATH_TO_sample_map.osm&gt; -i &lt;PATH_TO_autoware_requirement_set.json&gt; -o ./\n</code></pre>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#4-write-a-document","title":"4. Write a document","text":"<p>Contributors must provide documentation to explain what the validator can do. The document must explain the following.</p> <ul> <li>The validator's name</li> <li>Feature of the validator</li> <li>The source code where the validator is implemented</li> <li>A table of issues that the validator can detect. The following details are required.<ul> <li>Issue Code</li> <li>Message</li> <li>Severity</li> <li>Primitive</li> <li>Description of the issue</li> <li>Approach to fix the issue</li> </ul> </li> </ul> <p>In addition, add a link of the document to the table Relationship between requirements and validators in the main <code>README.md</code> to let the users know which map requirement your validator relates with.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/how_to_contribute/#5-submit-a-pull-request","title":"5. Submit a pull request","text":"<p>Submit a pull request to the autowarefoundation/autoware_tools repository.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/missing_regulatory_elements_for_crosswalk/","title":"missing_regulator_elements_for_crosswalk","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/missing_regulatory_elements_for_crosswalk/#missing_regulator_elements_for_crosswalk","title":"missing_regulator_elements_for_crosswalk","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/missing_regulatory_elements_for_crosswalk/#validator-name","title":"Validator name","text":"<p>mapping.crosswalk.missing_regulatory_elements</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/missing_regulatory_elements_for_crosswalk/#feature","title":"Feature","text":"<p>This validator checks whether each <code>crosswalk</code> subtype lanelet has a relevant regulatory element. Required information for a crosswalk is written in the Autoware documentation.</p> <p>The output issue marks \"lanelet\" as the primitive, and the lanelet ID is written together as ID.</p> Issue Code Message Severity Description Approach Crosswalk.MissingRegulatoryElements-001 \"No regulatory element refers to this crosswalk.\" Error There is a <code>crosswalk</code> subtype lanelet that hasn't been referred to any regulatory element. Create a <code>crosswalk</code> subtype regulatory element and refer to the crosswalk lanelet."},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/missing_regulatory_elements_for_crosswalk/#related-source-codes","title":"Related source codes","text":"<ul> <li>missing_regulatory_elements_for_crosswalk.hpp</li> <li>missing_regulatory_elements_for_crosswalk.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/regulatory_element_details_for_crosswalks/","title":"regulatory_element_details_for_crosswalks","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/regulatory_element_details_for_crosswalks/#regulatory_element_details_for_crosswalks","title":"regulatory_element_details_for_crosswalks","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/regulatory_element_details_for_crosswalks/#validator-name","title":"Validator name","text":"<p>mapping.crosswalk.regulatory_element_details</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/regulatory_element_details_for_crosswalks/#feature","title":"Feature","text":"<p>This validator checks whether the details in the <code>crosswalk</code> subtype regulatory elements are valid. Required information for a crosswalk is written in the Autoware documentation. This validator checks eight types of issues.</p> <p>The output issue marks \"lanelet\", \"linestring\" or \"regulatory_element\" as the primitive, and the regulatory element ID is written together as ID.</p> Issue Code Message Severity Primitive Description Approach Crosswalk.RegulatoryElementDetails-001 \"Regulatory element of crosswalk must have lanelet of crosswalk(refers).\" Error regulatory element There is a <code>crosswalk</code> subtype regulatory element that has no <code>refers</code>es. Write <code>refers</code> referring to a <code>crosswalk</code> subtype lanelet in the regulatory element Crosswalk.RegulatoryElementDetails-002 \"Regulatory element of crosswalk must have only one lanelet of crosswalk(refers).\" Error regulatory element There is a <code>crosswalk</code> subtype regulatory element that has multiple <code>refers</code>es. A <code>crosswalk</code> subtype regulatory element can have only one <code>refers</code>. Remove the <code>refers</code> that is not a crosswalk lanelet. Crosswalk.RegulatoryElementDetails-003 \"Regulatory element of crosswalk does not have stop line(ref_line).\" Info regulatory element There is a <code>crosswalk</code> subtype regulatory element that has no <code>ref_line</code>s Generally, there should be a stop line for the crosswalk. Be sure that the stop line exists or doesn't. Crosswalk.RegulatoryElementDetails-004 \"Regulatory element of crosswalk is nice to have crosswalk_polygon.\" Warning regulatory element There is a <code>crosswalk</code> subtype regulatory element that has no <code>crosswalk_polygon</code>s. It is recommended to surround a crosswalk with a <code>crosswalk_polygon</code>. Create one and add a <code>crosswalk_polygon</code> role member to the regulatory element with the polygon ID. Crosswalk.RegulatoryElementDetails-005 \"Regulatory element of crosswalk must have only one crosswalk_polygon.\" Error regulatory element There is a <code>crosswalk</code> subtype regulatory element that has multiple <code>crosswalk_polygon</code>s. Only one <code>crosswalk_polygon</code> is allowed per crosswalk. Remove the unnecessary ones. Crosswalk.RegulatoryElementDetails-006 \"Refers of crosswalk regulatory element must have type of crosswalk.\" Error lanelet There is a <code>crosswalk</code> subtype regulatory element whose <code>refers</code> is not a <code>crosswalk</code> subtype lanelet. Check that the <code>refers</code> is a <code>crosswalk</code> subtype lanelet Crosswalk.RegulatoryElementDetails-007 \"ref_line of crosswalk regulatory element must have type of stopline.\" Error linestring There is a <code>crosswalk</code> subtype regulatory element whose <code>ref_line</code> is not a <code>stop_line</code> type linestring. Check that the <code>ref_line</code> is a <code>stop_line</code> type linestring Crosswalk.RegulatoryElementDetails-008 \"Crosswalk polygon of crosswalk regulatory element must have type of crosswalk_polygon.\" Error polygon There is a <code>crosswalk</code> subtype regulatory element whose <code>crosswalk_polygon</code> is not a <code>crosswalk_polygon</code> type polygon. Check that the <code>crosswalk_polygon</code> mentioned in the regulatory element refers to a <code>crosswalk_polygon</code> type area."},{"location":"map/autoware_lanelet2_map_validator/docs/crosswalk/regulatory_element_details_for_crosswalks/#related-source-codes","title":"Related source codes","text":"<ul> <li>regulatory_element_details_for_crosswalks.hpp</li> <li>regulatory_element_details_for_crosswalks.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/","title":"intersection_area_dangling_reference","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/#intersection_area_dangling_reference","title":"intersection_area_dangling_reference","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/#validator-name","title":"Validator name","text":"<p>mapping.intersection.intersection_area_dangling_reference</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/#feature","title":"Feature","text":"<p>This validator checks whether each intersection lanelet(namely the lanelet with <code>turn_direction</code> property) has reference to existing <code>intersection_area</code> polygon. Such invalid case occurs when an intersection_area is deleted but its referrers are not updated.</p> <p>This is achieved by the following procedure.</p> <ol> <li>Obtain the set of <code>intersection_area</code> polygon IDs</li> <li>Check if intersection lanelet has \"intersection_area\" key and its value is contained in the above IDs</li> </ol> <p>The validator outputs the following issue with the corresponding ID of the primitive.</p> Issue Code Message Severity Primitive Description Approach Intersection.IntersectionAreaDanglingReference-001 \"Dangling reference to non-existing intersection area of ID \\&lt;LANELET ID&gt; is detected\" Error Lanelet The reported lanelet will cause a runtime error when attempting to look up the non-existent intersection_area. Go to the reported lanelet and delete \"intersection_area\" key entry."},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/#supplementary-information","title":"Supplementary information","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_dangling_reference/#related-source-codes","title":"Related source codes","text":"<ul> <li>intersection_area_dangling_reference.hpp</li> <li>intersection_area_dangling_reference.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/","title":"intersection_area_segment_type","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/#intersection_area_segment_type","title":"intersection_area_segment_type","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/#validator-name","title":"Validator name","text":"<p>mapping.intersection.intersection_area_segment_type</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/#feature","title":"Feature","text":"<p>This validator check whether each <code>intersection_area</code> type polygon is made from points that belong to <code>road_border</code> type linestrings or the starting/ending edge of a lanelet.</p> <p>This is achieved by the following procedure.</p> <ol> <li>Create a 2D bounding box that circumscribes the polygon.</li> <li>Collect <code>road_border</code> type linestrings within or intersecting the 2D bounding box.</li> <li>Collect starting/ending edges of lanelets within or intersecting the 2D bounding box.</li> <li>Examine each point that constitutes the polygon whether it belongs to the collection above.</li> </ol> <p>The validator outputs the following issue with the corresponding ID of the primitive.</p> Issue Code Message Severity Primitive Description Approach Intersection.IntersectionAreaSegmentType-001 \"This intersection area is not made by points from road_border linestrings or lanelet edges. (Point ID: \\&lt;POINT ID LIST&gt;)\" Error Polygon The <code>intersection_area</code> polygon has points that doesn't belong to <code>road_border</code> type linestrings or lanelet edges. The violating points are listed up at \\&lt;POINT ID LIST&gt;. Ensure that the <code>intersection_area</code> is formed ONLY by <code>road_border</code> linestrings and lanelet edges."},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/#supplementary-information","title":"Supplementary information","text":"<p>Note that this validator only examines what type of linestring the points constituting the polygon belongs to, and doesn't examine they have a valid connection. Use the <code>mapping.intersection.intersection_area_validity</code> to check whether the polygon is <code>boost::geometry::is_valid()</code>.</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_segment_type/#related-source-codes","title":"Related source codes","text":"<ul> <li>intersection_area_segment_type.hpp</li> <li>intersection_area_segment_type.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_validity/","title":"intersection_area_validity","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_validity/#intersection_area_validity","title":"intersection_area_validity","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_validity/#validator-name","title":"Validator name","text":"<p>mapping.intersection.intersection_area_validity</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_validity/#feature","title":"Feature","text":"<p>This validator check whether each <code>intersection_area</code> type polygon satisfies <code>boost::geometry::is_valid</code>.</p> <p>The validator outputs the following issue with the corresponding ID of the primitive.</p> Issue Code Message Severity Primitive Description Approach Intersection.IntersectionAreaValidity-001 \"This intersection_area doesn't satisfy boost::geometry::is_valid (reason: \\&lt;MESSAGE&gt;) Error Polygon The <code>intersection_area</code> polygon didn't satisfy <code>boost::geometry::is_valid</code>. There are several reasons expected and it is written in \"(reason: \\&lt;MESSAGE&gt;)\". The \\&lt;MESSAGE&gt; is a copy of the output message defined in the <code>boost::geometry</code> library."},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/intersection_area_validity/#related-source-codes","title":"Related source codes","text":"<ul> <li>intersection_area_validity.hpp</li> <li>intersection_area_validity.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/turn_direction_tagging/","title":"turn_direction_tagging","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/turn_direction_tagging/#turn_direction_tagging","title":"turn_direction_tagging","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/turn_direction_tagging/#validator-name","title":"Validator name","text":"<p>mapping.intersection.turn_direction_tagging</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/turn_direction_tagging/#feature","title":"Feature","text":"<p>This validator checks whether lanelets inside the <code>intersection_area</code> polygon have a <code>turn_direction</code> tag and it is set to \"straight\", \"left\", or \"right\".</p> <p>The validator will output the following issues with the corresponding primitive ID.</p> Issue Code Message Severity Primitive Description Approach Intersection.TurnDirectionTagging-001 \"This lanelet is missing a turn_direction tag.\" Error Lanelet Lanelets at intersections must have a <code>turn_direction</code> tag but this lanelet doesn't have it. Set a <code>turn_direction</code> tag to the lanelet with a value of <code>straight</code>, <code>left</code> or <code>right</code>. This tells the vehicle whether to use the blinkers or not at intersections. Intersection.TurnDirectionTagging-002 \"Invalid turn_direction tag  is found.\" Error Lanelet The <code>turn_direction</code> tag of this lanelet is set to  while it has to be <code>straight</code>, <code>left</code> or <code>right</code>. Fix the tag value to <code>straight</code>, <code>left</code> or <code>right</code>."},{"location":"map/autoware_lanelet2_map_validator/docs/intersection/turn_direction_tagging/#related-source-codes","title":"Related source codes","text":"<ul> <li>turn_direction_tagging.cpp</li> <li>turn_direction_tagging.hpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/stop_line/missing_regulatory_elements_for_stop_lines/","title":"missing_regulator_elements_for_stop_lines","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/stop_line/missing_regulatory_elements_for_stop_lines/#missing_regulator_elements_for_stop_lines","title":"missing_regulator_elements_for_stop_lines","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/stop_line/missing_regulatory_elements_for_stop_lines/#validator-name","title":"Validator name","text":"<p>mapping.stop_line.missing_regulatory_elements</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/stop_line/missing_regulatory_elements_for_stop_lines/#feature","title":"Feature","text":"<p>This validator checks whether each <code>stop_line</code> type linestring has a relevant regulatory element. Required information for a stop line is written in the Autoware documentation.</p> <p>The output issue marks \"linestring\" as the primitive, and the linestring ID is written together as ID.</p> Issue Code Message Severity Description Approach StopLine.MissingRegulatoryElements-001 \"No regulatory element refers to this stop line.\" Error There is a <code>stop_line</code> type linestring that hasn't been referred to any regulatory element. Create a regulatory element that refers to this stop line."},{"location":"map/autoware_lanelet2_map_validator/docs/stop_line/missing_regulatory_elements_for_stop_lines/#related-source-codes","title":"Related source codes","text":"<ul> <li>missing_regulatory_elements_for_stop_line.cpp</li> <li>missing_regulatory_elements_for_stop_line.hpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_referrers_for_traffic_lights/","title":"missing_referrers_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_referrers_for_traffic_lights/#missing_referrers_for_traffic_lights","title":"missing_referrers_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_referrers_for_traffic_lights/#validator-name","title":"Validator name","text":"<p>mapping.traffic_light.missing_referrers</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_referrers_for_traffic_lights/#feature","title":"Feature","text":"<p>This validator checks whether each <code>traffic_light</code> type regulatory element has been referred by at least one lanelet.</p> Issue Code Message Severity Primitive Description Approach TrafficLight.MissingReferrers-001 Regulatory element of traffic light must be referred by at least one lanelet. Error Regulatory Element There is a <code>traffic_light</code> type regulatory element that hasn't been referred by any lanelet. The lanelet that might be controlled by the traffic light must refer this regulatory element."},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_referrers_for_traffic_lights/#related-source-codes","title":"Related source codes","text":"<ul> <li>missing_referrers_for_traffic_lights.cpp</li> <li>missing_referrers_for_traffic_lights.hpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_regulatory_elements_for_traffic_lights/","title":"missing_regulator_elements_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_regulatory_elements_for_traffic_lights/#missing_regulator_elements_for_traffic_lights","title":"missing_regulator_elements_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_regulatory_elements_for_traffic_lights/#validator-name","title":"Validator name","text":"<p>mapping.traffic_light.missing_regulatory_elements</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_regulatory_elements_for_traffic_lights/#feature","title":"Feature","text":"<p>This validator checks whether each <code>traffic_light</code> type linestring has a relevant regulatory element. Required information for traffic lights is written in the Autoware documentation.</p> <p>The output issue marks \"linestring\" as the primitive, and the linestring ID is written together as ID.</p> Issue Code Message Severity Description Approach TrafficLight.MissingRegulatoryElements-001 \"No regulatory element refers to this traffic light.\" Error There is a <code>traffic_light</code> type linestring that hasn't been referred to any regulatory element. Create a <code>traffic_light</code> subtype regulatory element that refers to this linestring"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/missing_regulatory_elements_for_traffic_lights/#related-source-codes","title":"Related source codes","text":"<ul> <li>missing_regulatory_elements_for_traffic_light.hpp</li> <li>missing_regulatory_elements_for_traffic_light.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/regulatory_element_details_for_traffic_lights/","title":"regulatory_element_details_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/regulatory_element_details_for_traffic_lights/#regulatory_element_details_for_traffic_lights","title":"regulatory_element_details_for_traffic_lights","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/regulatory_element_details_for_traffic_lights/#validator-name","title":"Validator name","text":"<p>mapping.traffic_light.regulatory_element_details</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/regulatory_element_details_for_traffic_lights/#feature","title":"Feature","text":"<p>This validator checks whether the details in the <code>traffic_light</code> subtype regulatory elements are valid. Required information for traffic lights is written in the Autoware documentation. This validator checks four types of issues.</p> <p>The output issue marks \"linestring\" or \"regulatory element\" as the primitive, and the lanelet ID is written together as ID.</p> Issue Code Message Severity Primitive Description Approach TrafficLight.RegulatoryElementDetails-001 \"Regulatory element of traffic light must have a stop line(ref_line).\" Error regulatory element There is a <code>traffic_light</code> subtype regulatory element that has no <code>ref_line</code>s Add <code>ref_line</code> to the regulatory element that refers to the id of the stop line linestring. TrafficLight.RegulatoryElementDetails-002 \"Refers of traffic light regulatory element must have type of traffic_light.\" Error linestring There is a <code>traffic_light</code> subtype regulatory element whose <code>refers</code> is not a <code>traffic_light</code> type linestring. Check that the <code>refers</code> in the regulatory element is a <code>traffic_light</code> type linestring. TrafficLight.RegulatoryElementDetails-003 \"ref_line of traffic light regulatory element must have type of stop_line.\" Error linestring There is a <code>traffic_light</code> subtype regulatory element whose <code>ref_line</code> is not a <code>stop_line</code> type linestring. Check that the <code>ref_line</code> in the regulatory element is a <code>stop_line</code> type linestring"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/regulatory_element_details_for_traffic_lights/#related-source-codes","title":"Related source codes","text":"<ul> <li>regulatory_element_details_for_traffic_lights.hpp</li> <li>regulatory_element_details_for_traffic_lights.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/","title":"traffic_light_facing","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#traffic_light_facing","title":"traffic_light_facing","text":""},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#validator-name","title":"Validator name","text":"<p>mapping.traffic_light.correct_facing</p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#recommended-prerequisite-validators","title":"Recommended prerequisite validators","text":"<ul> <li>mapping.traffic_light.missing_referrers</li> <li>mapping.traffic_light.regulatory_element_details</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#feature","title":"Feature","text":"<p>This validator checks whether each <code>traffic_light</code> linestring is drawn with the correct direction, because the linestring direction describes the facing of the traffic_light. If the traffic light is facing to the viewer, the traffic light linestring must be drawn from the left point to the right point seen from the viewer. Note that this validator only check traffic lights whose subtype are <code>red_yellow_green</code>. This validator checks five types of issues. The former three issues are related to prerequisites to perform correct validation rather than direct validation results of the traffic light facing. The latter two issues mention to the traffic light facing.</p> <p>All output issues specify the traffic_light \"linestring\" or the traffic_light \"regulatory_element\" as the primitive, and the primitive ID will be specified as the ID.</p> Issue Code Message Severity Primitive Description Approach TrafficLight.CorrectFacing-001 \"Lanelets referring this traffic_light have several divergent starting lines\" Info Linestring A <code>traffic_light</code> subtype regulatory element may be referred by multiple lanelets. This warning appears when the starting line of those lanelets (which tends to be the same or similar) diverge too much. This hardly happens, but maybe the referring lanelet is completely wrong or the traffic light cannot be seen from the starting edge of the referring lanelet. TrafficLight.CorrectFacing-002 \"The linestring direction seems to be wrong.\" Error Linestring This <code>traffic_light</code> type linestring is drawn with the wrong direction. Fix the traffic light linestring so that it is drawn from the left to the right seen from the stop line. TrafficLight.CorrectFacing-003 \"The linestring direction has been judged as both correct and wrong.\" Warning Linestring The validator cannot judge whether the direction of this <code>traffic_light</code> type linestring is correct. (Mostly they are correct.) This occurs from special regulatory element definitions and technical issues written below. This occurs in the Difficult Case written below. This validator currently cannot determine that the traffic light facing is correct in this case, so please recheck it by yourself and please ignore it if it is correct."},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#procedure","title":"Procedure","text":"<p>This flow chart shows the simplified procedure how the validation is done.</p> <p></p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#difficult-cases","title":"Difficult cases","text":"<p>Currently, this validator assumes that all traffic lights in the same regulatory element has the same facing. However, there might be cases that this assumption doesn't hold, and this is only when traffic lights on the other side of the road is in the same regulatory element. It is hard to tell that this traffic light is for this road or the opposite road since the facing of the traffic light is unknown yet, so this validator keeps its ambiguity for now. This kind of traffic light will be judged as correct from the this side but not from the other side, and it will be misjudged oppositely if the traffic light linestring id drawn wrong. This validator will throws a warning for this case and tells the user to check it by their own.</p> <p>We assume that this kind of traffic light could be found only a few, but if you feel this concerning you can remove the traffic light on the other road from the regulatory element. This workaround affects nothing if your planning module doesn't utilize the information that the traffic light on the other road has the same timing of lighting.</p> <p></p>"},{"location":"map/autoware_lanelet2_map_validator/docs/traffic_light/traffic_light_facing/#related-source-codes","title":"Related source codes","text":"<ul> <li>traffic_light_facing.hpp</li> <li>traffic_light_facing.cpp</li> </ul>"},{"location":"map/autoware_lanelet2_map_validator/template/validator_template/","title":"validator_template","text":""},{"location":"map/autoware_lanelet2_map_validator/template/validator_template/#validator_template","title":"validator_template","text":""},{"location":"map/autoware_lanelet2_map_validator/template/validator_template/#validator-name","title":"Validator name","text":"<p>mapping.validator.template</p>"},{"location":"map/autoware_lanelet2_map_validator/template/validator_template/#feature","title":"Feature","text":"<p>Feature explanation here.</p> Issue Code Message Severity Description Approach"},{"location":"map/autoware_lanelet2_map_validator/template/validator_template/#related-source-codes","title":"Related source codes","text":"<ul> <li>validator_template.cpp</li> <li>validator_template.hpp</li> </ul>"},{"location":"map/autoware_pointcloud_divider/","title":"autoware_pointcloud_divider","text":""},{"location":"map/autoware_pointcloud_divider/#autoware_pointcloud_divider","title":"autoware_pointcloud_divider","text":"<p>This is a tool for processing pcd files, and it can perform the following functions:</p> <ul> <li>Dividing point clouds</li> <li>Downsampling point clouds</li> <li>Generating metadata to efficiently handle the divided point clouds</li> </ul>"},{"location":"map/autoware_pointcloud_divider/#supported-data-format","title":"Supported Data Format","text":"<p>Currently, only <code>pcl::PointXYZ</code> and <code>pcl::PointXYZI</code> are supported. Any PCD will be loaded as those two types.</p> <p>This tool can be used with files that have data fields other than <code>XYZI</code> (e.g., <code>XYZRGB</code>) and files that only contain <code>XYZ</code>.</p> <ul> <li>Data fields other than <code>XYZI</code> are ignored during loading.</li> <li>When loading <code>XYZ</code>-only data, the <code>intensity</code> field is assigned 0.</li> </ul>"},{"location":"map/autoware_pointcloud_divider/#installation","title":"Installation","text":"<pre><code>cd &lt;PATH_TO_pilot-auto.*&gt; # OR &lt;PATH_TO_autoware&gt;\ncd src/\ngit clone git@github.com:autowarefoundation/autoware_tools.git\ncd ..\ncolcon build --cmake-args -DCMAKE_BUILD_TYPE=Release --catkin-skip-building-tests --symlink-install --packages-up-to autoware_pointcloud_divider\n</code></pre>"},{"location":"map/autoware_pointcloud_divider/#usage","title":"Usage","text":"<ul> <li> <p>Select directory, process all files found with <code>find $INPUT_DIR -name \"*.pcd\"</code>.</p> <pre><code>ros2 launch autoware_pointcloud_divider pointcloud_divider.launch.xml input_pcd_or_dir:=&lt;INPUT_DIR&gt; output_pcd_dir:=&lt;OUTPUT_DIR&gt; prefix:=&lt;PREFIX&gt;\n</code></pre> Name Description INPUT_DIR Directory that contains all PCD files OUTPUT_DIR Output directory name PREFIX Prefix of output PCD file name </li> </ul> <p><code>INPUT_DIR</code> and <code>OUTPUT_DIR</code> should be specified as absolute paths.</p> <p>NOTE: The folder <code>OUTPUT_DIR</code> is auto generated. If it already exists, all files within that folder will be deleted before the tool runs. Hence, users should backup the important files in that folder if necessary.</p>"},{"location":"map/autoware_pointcloud_divider/#parameters","title":"Parameters","text":"Name Type Description Default Range use_large_grid boolean Pack small segments to larger folders false N/A leaf_size float Resolution in meter for downsampling the output segments. Setting to negative to get the raw output PCDs. 0.2 N/A grid_size_x float The x size in meter of the output segments 20 N/A grid_size_y float The y size in meter of the output segments 20 N/A input_pcd_or_dir string The path to the folder containing the input PCD files N/A output_pcd_dir string The path to the folder containing the output PCD files N/A prefix string The prefix for the name of the output PCD files N/A point_type string Type of the point when processing PCD files. Could be point_xyz or point_xyzi point_xyzi N/A <p>How the point cloud is processed.</p> <p></p> <p>How the PCD file is named</p> <p></p>"},{"location":"map/autoware_pointcloud_divider/#parameter-example","title":"Parameter example","text":"<ol> <li> <p>Dividing point clouds without downsampling</p> <pre><code>use_large_grid: false\nleaf_size: -1.0 # any negative number\ngrid_size_x: 20\ngrid_size_y: 20\n</code></pre> </li> <li> <p>Dividing and downsampling point clouds</p> <pre><code>use_large_grid: false\nleaf_size: 0.2\ngrid_size_x: 20\ngrid_size_y: 20\n</code></pre> </li> </ol>"},{"location":"map/autoware_pointcloud_divider/#metadata-yaml-format","title":"Metadata YAML Format","text":"<p>The metadata file should be named <code>metadata.yaml</code>. It contains the following fields:</p> <ul> <li><code>x_resolution</code>: The resolution along the X-axis.</li> <li><code>y_resolution</code>: The resolution along the Y-axis.</li> </ul> <p>Additionally, the file contains entries for individual point cloud files (<code>.pcd</code> files) and their corresponding grid coordinates. The key is the file name, and the value is a list containing the X and Y coordinates of the lower-left corner of the grid cell associated with that file. The grid cell's boundaries can be calculated using the <code>x_resolution</code> and <code>y_resolution</code> values.</p> <p>For example:</p> <pre><code>x_resolution: 100.0\ny_resolution: 150.0\nA.pcd: [1200, 2500] # -&gt; 1200 &lt;= x &lt;= 1300, 2500 &lt;= y &lt;= 2650\nB.pcd: [1300, 2500] # -&gt; 1300 &lt;= x &lt;= 1400, 2500 &lt;= y &lt;= 2650\nC.pcd: [1200, 2650] # -&gt; 1200 &lt;= x &lt;= 1300, 2650 &lt;= y &lt;= 2800\nD.pcd: [1400, 2650] # -&gt; 1400 &lt;= x &lt;= 1500, 2650 &lt;= y &lt;= 2800\n</code></pre>"},{"location":"map/autoware_pointcloud_divider/#license","title":"LICENSE","text":"<p>Parts of files grid_info.hpp, pcd_divider.hpp, and pcd_divider.cpp are copied from MapIV's pointcloud_divider and are under BSD-3-Clauses license. The remaining code are under Apache License 2.0</p>"},{"location":"map/autoware_pointcloud_merger/","title":"autoware_pointcloud_merger","text":""},{"location":"map/autoware_pointcloud_merger/#autoware_pointcloud_merger","title":"autoware_pointcloud_merger","text":"<p>This is a tool for processing pcd files, and it can perform the following functions:</p> <ul> <li>Merging multiple PCD files to a single PCD file</li> <li>Downsampling point clouds</li> </ul>"},{"location":"map/autoware_pointcloud_merger/#supported-data-format","title":"Supported Data Format","text":"<p>Currently, only <code>pcl::PointXYZ</code> and <code>pcl::PointXYZI</code> are supported. Any PCD will be loaded as those two types .</p> <p>This tool can be used with files that have data fields other than <code>XYZI</code> (e.g., <code>XYZRGB</code>) and files that only contain <code>XYZ</code>.</p> <ul> <li>Data fields other than <code>XYZI</code> are ignored during loading.</li> <li>When loading <code>XYZ</code>-only data, the <code>intensity</code> field is assigned 0.</li> </ul>"},{"location":"map/autoware_pointcloud_merger/#installation","title":"Installation","text":"<pre><code>cd &lt;PATH_TO_pilot-auto.*&gt; # OR &lt;PATH_TO_autoware&gt;\ncd src/\ngit clone git@github.com:autowarefoundation/autoware_tools.git\ncd ..\ncolcon build --cmake-args -DCMAKE_BUILD_TYPE=Release --catkin-skip-building-tests --symlink-install --packages-up-to autoware_pointcloud_merger\n</code></pre>"},{"location":"map/autoware_pointcloud_merger/#usage","title":"Usage","text":"<ul> <li> <p>Merger all PCD files from the input directory into a single output PCD</p> <pre><code>ros2 launch autoware_pointcloud_merger pointcloud_merger.launch.xml input_pcd_dir:=&lt;INPUT_DIR&gt; output_pcd:=&lt;OUTPUT_PCD&gt;\n</code></pre> Name Description INPUT_DIR Directory that contains all input PCD files OUTPUT_PCD Name of the output PCD file </li> </ul> <p><code>INPUT_DIR</code> and <code>OUTPUT_PCD</code> should be specified as absolute paths.</p>"},{"location":"map/autoware_pointcloud_merger/#parameter","title":"Parameter","text":"Name Type Description Default Range leaf_size float Resolution in meter for downsampling the output PCD. Setting to negative to get the raw output PCD. -0.1 N/A input_pcd_dir string The path to the folder containing the input PCD files N/A output_pcd string The path to the merged PCD file N/A point_type string Type of the point when processing PCD files. Could be point_xyz or point_xyzi point_xyzi N/A"},{"location":"map/autoware_pointcloud_merger/#license","title":"LICENSE","text":"<p>Parts of files pcd_merger.hpp, and pcd_merger.cpp are copied from MapIV's pointcloud_divider and are under BSD-3-Clauses license. The remaining code are under Apache License 2.0</p>"},{"location":"planning/autoware_planning_data_analyzer/","title":"Planning Data Analyzer","text":""},{"location":"planning/autoware_planning_data_analyzer/#planning-data-analyzer","title":"Planning Data Analyzer","text":""},{"location":"planning/autoware_planning_data_analyzer/#usage","title":"Usage","text":"<pre><code>ros2 launch autoware_planning_data_analyzer behavior_analyzer.launch.xml bag_path:=&lt;ROSBAG&gt;\n</code></pre>"},{"location":"planning/autoware_planning_data_analyzer/#output","title":"Output","text":"Name Type Description <code>~/output/manual_metrics</code> <code>tier4_debug_msgs::msg::Float32MultiArrayStamped</code> Metrics calculated from the driver's driving trajectory. <code>~/output/system_metrics</code> <code>tier4_debug_msgs::msg::Float32MultiArrayStamped</code> Metrics calculated from the autoware output. <code>~/output/manual_score</code> <code>tier4_debug_msgs::msg::Float32MultiArrayStamped</code> Driving scores calculated from the driver's driving trajectory. <code>~/output/system_score</code> <code>tier4_debug_msgs::msg::Float32MultiArrayStamped</code> Driving scores calculated from the autoware output."},{"location":"planning/autoware_route_client/","title":"Route Client","text":""},{"location":"planning/autoware_route_client/#route-client","title":"Route Client","text":"<p>This package contains a tool to send request to set route.</p>"},{"location":"planning/autoware_route_client/#usage","title":"Usage","text":""},{"location":"planning/autoware_route_client/#prepare-a-route-file","title":"Prepare a route file","text":"<p>Prepare a YAML file containing route information. The file format is like following:</p> <pre><code>goal:\nposition:\nx: 0.0\ny: 0.0\nz: 0.0\norientation:\nx: 0.0\ny: 0.0\nz: 0.0\nw: 0.0\nsegments:\n- preferred:\nid: 0\ntype: lane\nalternatives:\n- id: 1\ntype: lane\n- preferred:\nid: 2\ntype: lane\nalternatives: []\n- preferred:\nid: 3\ntype: lane\nalternatives:\n- id: 4\ntype: lane\n</code></pre>"},{"location":"planning/autoware_route_client/#send-request-to-set-route","title":"Send request to set route","text":"<p>Execute following command.</p> <pre><code>ros2 run autoware_route_client route_client.py &lt;path_to_yaml_file&gt;\n</code></pre>"},{"location":"planning/autoware_rtc_replayer/","title":"rtc_replayer","text":""},{"location":"planning/autoware_rtc_replayer/#rtc_replayer","title":"rtc_replayer","text":""},{"location":"planning/autoware_rtc_replayer/#purpose","title":"Purpose","text":"<p>The current issue for RTC commands is that service is not recorded to rosbag, so it's very hard to analyze what was happened exactly. So this package makes it possible to replay rtc commands service from rosbag rtc status topic to resolve that issue.</p>"},{"location":"planning/autoware_rtc_replayer/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"planning/autoware_rtc_replayer/#input","title":"Input","text":"Name Type Description <code>/debug/rtc_status</code> tier4_rtc_msgs::msg::CooperateStatusArray CooperateStatusArray that is recorded in rosbag"},{"location":"planning/autoware_rtc_replayer/#output","title":"Output","text":"Name Type Description <code>/api/external/set/rtc_commands</code> tier4_rtc_msgs::msg::CooperateCommands CooperateCommands that is replayed by this package"},{"location":"planning/autoware_rtc_replayer/#inner-workings-algorithms","title":"Inner-workings / Algorithms","text":""},{"location":"planning/autoware_rtc_replayer/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>This package can't replay CooperateCommands correctly if CooperateStatusArray is not stable. And this replay is always later one step than actual however it will not affect much for behavior.</p>"},{"location":"planning/autoware_rtc_replayer/#future-extensions-unimplemented-parts","title":"Future extensions / Unimplemented parts","text":"<p>tbd.</p>"},{"location":"planning/autoware_static_centerline_generator/","title":"Static Centerline Generator","text":""},{"location":"planning/autoware_static_centerline_generator/#static-centerline-generator","title":"Static Centerline Generator","text":""},{"location":"planning/autoware_static_centerline_generator/#purpose","title":"Purpose","text":"<p>This package statically calculates the centerline satisfying path footprints inside the drivable area.</p> <p>On narrow-road driving, the default centerline, which is the middle line between lanelets' right and left boundaries, often causes path footprints outside the drivable area. To make path footprints inside the drivable area, we use online path shape optimization by the autoware_path_optimizer package.</p> <p>Instead of online path shape optimization, we introduce static centerline optimization. With this static centerline optimization, we have following advantages.</p> <ul> <li>We can see the optimized centerline shape in advance.<ul> <li>With the default autoware, path shape is not determined until the vehicle drives there.</li> <li>This enables offline path shape evaluation.</li> </ul> </li> <li>We do not have to calculate a heavy and sometimes unstable path optimization since the path footprints are already inside the drivable area.</li> </ul>"},{"location":"planning/autoware_static_centerline_generator/#use-cases","title":"Use cases","text":"<p>There are two interfaces to communicate with the centerline optimizer.</p>"},{"location":"planning/autoware_static_centerline_generator/#vector-map-builder-interface","title":"Vector Map Builder Interface","text":"<p>Note: This function of Vector Map Builder has not been released. Please wait for a while. Currently there is no documentation about Vector Map Builder's operation for this function.</p> <p>The optimized centerline can be generated from Vector Map Builder's operation.</p> <p>We can run</p> <ul> <li>path planning server</li> <li>http server to connect path planning server and Vector Map Builder</li> </ul> <p>with the following command by designating <code>&lt;vehicle_model&gt;</code></p> <pre><code>ros2 launch autoware_static_centerline_generator run_planning_server.launch.xml vehicle_model:=&lt;vehicle-model&gt;\n</code></pre> <p>FYI, port ID of the http server is 4010 by default.</p>"},{"location":"planning/autoware_static_centerline_generator/#command-line-interface","title":"Command Line Interface","text":"<p>The optimized centerline can be generated from the command line interface by designating</p> <ul> <li><code>&lt;input-osm-path&gt;</code></li> <li><code>&lt;output-osm-path&gt;</code> (not mandatory)</li> <li><code>&lt;start-lanelet-id&gt;</code></li> <li><code>&lt;end-lanelet-id&gt;</code></li> <li><code>&lt;vehicle-model&gt;</code></li> </ul> <pre><code>ros2 launch autoware_static_centerline_generator static_centerline_generator.launch.xml run_backgrond:=false lanelet2_input_file_path:=&lt;input-osm-path&gt; lanelet2_output_file_path:=&lt;output-osm-path&gt; start_lanelet_id:=&lt;start-lane-id&gt; end_lanelet_id:=&lt;end-lane-id&gt; vehicle_model:=&lt;vehicle-model&gt;\n</code></pre> <p>The default output map path containing the optimized centerline locates <code>/tmp/lanelet2_map.osm</code>. If you want to change the output map path, you can remap the path by designating <code>&lt;output-osm-path&gt;</code>.</p>"},{"location":"planning/autoware_static_centerline_generator/#visualization","title":"Visualization","text":"<p>When launching the path planning server, rviz is launched as well as follows. </p> <ul> <li>The yellow footprints are the original ones from the osm map file.<ul> <li>FYI: Footprints are generated based on the centerline and vehicle size.</li> </ul> </li> <li>The red footprints are the optimized ones.</li> <li>The gray area is the drivable area.</li> <li>You can see that the red footprints are inside the drivable area although the yellow ones are outside.</li> </ul>"},{"location":"planning/autoware_static_centerline_generator/#unsafe-footprints","title":"Unsafe footprints","text":"<p>Sometimes the optimized centerline footprints are close to the lanes' boundaries. We can check how close they are with <code>unsafe footprints</code> marker as follows.</p> <p>Footprints' color depends on its distance to the boundaries, and text expresses its distance.</p> <p></p> <p>By default, footprints' color is</p> <ul> <li>when the distance is less than 0.1 [m] : red</li> <li>when the distance is less than 0.2 [m] : green</li> <li>when the distance is less than 0.3 [m] : blue</li> </ul>"},{"location":"planning/planning_debug_tools/","title":"Planning Debug Tools","text":""},{"location":"planning/planning_debug_tools/#planning-debug-tools","title":"Planning Debug Tools","text":"<p>This package contains several planning-related debug tools.</p> <ul> <li>Trajectory analyzer: visualizes the information (speed, curvature, yaw, etc) along the trajectory</li> <li>Closest velocity checker: prints the velocity information indicated by each modules</li> <li>Perception reproducer: generates detected objects from rosbag data in planning simulator environment</li> <li>processing time checker: displays processing_time of modules on the terminal</li> <li>logging level updater: updates the logging level of the planning modules.</li> </ul>"},{"location":"planning/planning_debug_tools/#trajectory-analyzer","title":"Trajectory analyzer","text":"<p>The <code>trajectory_analyzer</code> visualizes the information (speed, curvature, yaw, etc) along the trajectory. This feature would be helpful for purposes such as \"investigating the reason why the vehicle decelerates here\". This feature employs the OSS PlotJuggler.</p> <p></p>"},{"location":"planning/planning_debug_tools/#stop-reason-visualizer","title":"Stop reason visualizer","text":"<p>This is to visualize stop factor and reason. see the details</p>"},{"location":"planning/planning_debug_tools/#how-to-use","title":"How to use","text":"<p>please launch the analyzer node</p> <pre><code>ros2 launch planning_debug_tools trajectory_analyzer.launch.xml\n</code></pre> <p>and visualize the analyzed data on the plot juggler following below.</p>"},{"location":"planning/planning_debug_tools/#setup-plotjuggler","title":"setup PlotJuggler","text":"<p>For the first time, please add the following code to reactive script and save it as the picture below! (Looking for the way to automatically load the configuration file...)</p> <p>You can customize what you plot by editing this code.</p> <p></p> <p>in Global code</p> <pre><code>behavior_path = '/planning/scenario_planning/lane_driving/behavior_planning/path_with_lane_id/debug_info'\nbehavior_velocity = '/planning/scenario_planning/lane_driving/behavior_planning/path/debug_info'\nmotion_avoid = '/planning/scenario_planning/lane_driving/motion_planning/path_optimizer/trajectory/debug_info'\nmotion_smoother_latacc = '/planning/scenario_planning/motion_velocity_smoother/debug/trajectory_lateral_acc_filtered/debug_info'\nmotion_smoother = '/planning/scenario_planning/trajectory/debug_info'\n</code></pre> <p>in function(tracker_time)</p> <pre><code>PlotCurvatureOverArclength('k_behavior_path', behavior_path, tracker_time)\nPlotCurvatureOverArclength('k_behavior_velocity', behavior_velocity, tracker_time)\nPlotCurvatureOverArclength('k_motion_avoid', motion_avoid, tracker_time)\nPlotCurvatureOverArclength('k_motion_smoother', motion_smoother, tracker_time)\n\nPlotVelocityOverArclength('v_behavior_path', behavior_path, tracker_time)\nPlotVelocityOverArclength('v_behavior_velocity', behavior_velocity, tracker_time)\nPlotVelocityOverArclength('v_motion_avoid', motion_avoid, tracker_time)\nPlotVelocityOverArclength('v_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotVelocityOverArclength('v_motion_smoother', motion_smoother, tracker_time)\n\nPlotAccelerationOverArclength('a_behavior_path', behavior_path, tracker_time)\nPlotAccelerationOverArclength('a_behavior_velocity', behavior_velocity, tracker_time)\nPlotAccelerationOverArclength('a_motion_avoid', motion_avoid, tracker_time)\nPlotAccelerationOverArclength('a_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotAccelerationOverArclength('a_motion_smoother', motion_smoother, tracker_time)\n\nPlotYawOverArclength('yaw_behavior_path', behavior_path, tracker_time)\nPlotYawOverArclength('yaw_behavior_velocity', behavior_velocity, tracker_time)\nPlotYawOverArclength('yaw_motion_avoid', motion_avoid, tracker_time)\nPlotYawOverArclength('yaw_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotYawOverArclength('yaw_motion_smoother', motion_smoother, tracker_time)\n\nPlotCurrentVelocity('localization_kinematic_state', '/localization/kinematic_state', tracker_time)\n</code></pre> <p>in Function Library </p> <pre><code>function PlotValue(name, path, timestamp, value)\nnew_series = ScatterXY.new(name)\nindex = 0\nwhile(true) do\nseries_k = TimeseriesView.find( string.format( \"%s/\"..value..\"[%d]\", path, index) )\nseries_s = TimeseriesView.find( string.format( \"%s/arclength[%d]\", path, index) )\nseries_size = TimeseriesView.find( string.format( \"%s/size\", path) )\n\nif series_k == nil or series_s == nil then break end\n\nk = series_k:atTime(timestamp)\ns = series_s:atTime(timestamp)\nsize = series_size:atTime(timestamp)\n\nif index &gt;= size then break end\n\nnew_series:push_back(s,k)\nindex = index+1\nend\nend\n\nfunction PlotCurvatureOverArclength(name, path, timestamp)\nPlotValue(name, path, timestamp,\"curvature\")\nend\n\nfunction PlotVelocityOverArclength(name, path, timestamp)\nPlotValue(name, path, timestamp,\"velocity\")\nend\n\nfunction PlotAccelerationOverArclength(name, path, timestamp)\nPlotValue(name, path, timestamp,\"acceleration\")\nend\n\nfunction PlotYawOverArclength(name, path, timestamp)\nPlotValue(name, path, timestamp,\"yaw\")\nend\n\nfunction PlotCurrentVelocity(name, kinematics_name, timestamp)\nnew_series = ScatterXY.new(name)\nseries_v = TimeseriesView.find( string.format( \"%s/twist/twist/linear/x\", kinematics_name))\nif series_v == nil then\nprint(\"error\")\nreturn\nend\nv = series_v:atTime(timestamp)\nnew_series:push_back(0.0, v)\nend\n</code></pre> <p>Then, run the plot juggler.</p>"},{"location":"planning/planning_debug_tools/#how-to-customize-the-plot","title":"How to customize the plot","text":"<p>Add Path/PathWithLaneIds/Trajectory topics you want to plot in the <code>trajectory_analyzer.launch.xml</code>, then the analyzed topics for these messages will be published with <code>TrajectoryDebugINfo.msg</code> type. You can then visualize these data by editing the reactive script on the PlotJuggler.</p>"},{"location":"planning/planning_debug_tools/#requirements","title":"Requirements","text":"<p>The version of the plotJuggler must be &gt; <code>3.5.0</code></p>"},{"location":"planning/planning_debug_tools/#closest-velocity-checker","title":"Closest velocity checker","text":"<p>This node prints the velocity information indicated by planning/control modules on a terminal. For trajectories calculated by planning modules, the target velocity on the trajectory point which is closest to the ego vehicle is printed. For control commands calculated by control modules, the target velocity and acceleration is directly printed. This feature would be helpful for purposes such as \"investigating the reason why the vehicle does not move\".</p> <p>You can launch by</p> <pre><code>ros2 run planning_debug_tools closest_velocity_checker.py\n</code></pre> <p></p>"},{"location":"planning/planning_debug_tools/#trajectory-visualizer","title":"Trajectory visualizer","text":"<p>The old version of the trajectory analyzer. It is written in Python and more flexible, but very slow.</p>"},{"location":"planning/planning_debug_tools/#for-other-use-case-experimental","title":"For other use case (experimental)","text":"<p>To see behavior velocity planner's internal plath with lane id add below example value to behavior velocity analyzer and set <code>is_publish_debug_path: true</code></p> <pre><code>crosswalk ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/crosswalk/debug_info'\nintersection ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/intersection/debug_info'\ntraffic_light ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/traffic_light/debug_info'\nmerge_from_private ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/merge_from_private/debug_info'\nocclusion_spot ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/occlusion_spot/debug_info'\n</code></pre> <pre><code>PlotVelocityOverArclength('v_crosswalk', crosswalk, tracker_time)\nPlotVelocityOverArclength('v_intersection', intersection, tracker_time)\nPlotVelocityOverArclength('v_merge_from_private', merge_from_private, tracker_time)\nPlotVelocityOverArclength('v_traffic_light', traffic_light, tracker_time)\nPlotVelocityOverArclength('v_occlusion', occlusion_spot, tracker_time)\n\nPlotYawOverArclength('yaw_crosswalk', crosswalk, tracker_time)\nPlotYawOverArclength('yaw_intersection', intersection, tracker_time)\nPlotYawOverArclength('yaw_merge_from_private', merge_from_private, tracker_time)\nPlotYawOverArclength('yaw_traffic_light', traffic_light, tracker_time)\nPlotYawOverArclength('yaw_occlusion', occlusion_spot, tracker_time)\n\nPlotCurrentVelocity('localization_kinematic_state', '/localization/kinematic_state', tracker_time)\n</code></pre>"},{"location":"planning/planning_debug_tools/#perception-reproducer","title":"Perception reproducer","text":"<p>This script can overlay the perception results from the rosbag on the planning simulator synchronized with the simulator's ego pose.</p>"},{"location":"planning/planning_debug_tools/#how-it-works","title":"How it works","text":"<p>Whenever the ego's position changes, a chronological <code>reproduce_sequence</code> queue is generated based on its position with a search radius (default to 2 m). If the queue is empty, the nearest odom message in the rosbag is added to the queue. When publishing perception messages, the first element in the <code>reproduce_sequence</code> is popped and published.</p> <p>This design results in the following behavior:</p> <ul> <li>When ego stops, the perception messages are published in chronological order until queue is empty.</li> <li>When the ego moves, a perception message close to ego's position is published.</li> </ul>"},{"location":"planning/planning_debug_tools/#available-options","title":"Available Options","text":"<ul> <li><code>-b</code>, <code>--bag</code>: Rosbag file path (required)</li> <li><code>-d</code>, <code>--detected-object</code>: Publish detected objects</li> <li><code>-t</code>, <code>--tracked-object</code>: Publish tracked objects</li> <li><code>-r</code>, <code>--search-radius</code>: Set the search radius in meters (default: 1.5m). If set to 0, always publishes the nearest message</li> <li><code>-c</code>, <code>--reproduce-cool-down</code>: Set the cool down time in seconds (default: 80.0s)</li> <li><code>-p</code>, <code>--pub-route</code>: Initialize localization and publish a route based on poses from the rosbag</li> <li><code>-n</code>, <code>--noise</code>: Apply perception noise to objects when publishing repeated messages (default: True)</li> <li><code>-f</code>, <code>--rosbag-format</code>: Specify rosbag data format (default: \"db3\")</li> <li><code>-v</code>, <code>--verbose</code>: Output debug data</li> </ul>"},{"location":"planning/planning_debug_tools/#how-to-use_1","title":"How to use","text":"<p>First, launch the planning simulator, and put the ego pose. Then, run the script according to the following command.</p> <p>By designating a rosbag, perception reproducer can be launched.</p> <pre><code>ros2 run planning_debug_tools perception_reproducer.py -b &lt;bag-file&gt;\n</code></pre> <p>You can designate multiple rosbags in the directory.</p> <pre><code>ros2 run planning_debug_tools perception_reproducer.py -b &lt;dir-to-bag-files&gt;\n</code></pre> <p>Instead of publishing predicted objects, you can publish detected/tracked objects by designating <code>-d</code> or <code>-t</code>, respectively.</p> <p>The <code>--pub-route</code> option enables automatic route generation based on the rosbag data. When enabled, the script:</p> <ol> <li>Extracts the initial and goal poses from the beginning and end of the rosbag file</li> <li>Initializes the localization system with the initial pose</li> <li>Generates and publishes a route to the goal pose</li> </ol> <p>Example usage with route publication:</p> <pre><code>ros2 run planning_debug_tools perception_reproducer.py -b &lt;bag-file&gt; -p\n</code></pre>"},{"location":"planning/planning_debug_tools/#perception-replayer","title":"Perception replayer","text":"<p>A part of the feature is under development.</p> <p>This script can overlay the perception results from the rosbag on the planning simulator.</p> <p>In detail, this script publishes the data at a certain timestamp from the rosbag. The timestamp will increase according to the real time without any operation. By using the GUI, you can modify the timestamp by pausing, changing the rate or going back into the past.</p>"},{"location":"planning/planning_debug_tools/#how-to-use_2","title":"How to use","text":"<p>First, launch the planning simulator, and put the ego pose. Then, run the script according to the following command.</p> <p>By designating a rosbag, perception replayer can be launched. The GUI is launched as well with which a timestamp of rosbag can be managed.</p> <pre><code>ros2 run planning_debug_tools perception_replayer.py -b &lt;bag-file&gt;\n</code></pre> <p>You can designate multiple rosbags in the directory.</p> <pre><code>ros2 run planning_debug_tools perception_replayer.py -b &lt;dir-to-bag-files&gt;\n</code></pre> <p>Instead of publishing predicted objects, you can publish detected/tracked objects by designating <code>-d</code> or <code>-t</code>, respectively.</p>"},{"location":"planning/planning_debug_tools/#processing-time-checker","title":"Processing time checker","text":"<p>The purpose of the Processing Time Subscriber is to monitor and visualize the processing times of various ROS 2 topics in a system. By providing a real-time terminal-based visualization, users can easily confirm the processing time performance as in the picture below.</p> <p></p> <p>You can run the program by the following command.</p> <pre><code>ros2 run planning_debug_tools processing_time_checker.py -f &lt;update-hz&gt; -m &lt;max-bar-time&gt;\n</code></pre> <p>This program subscribes to ROS 2 topics that have a suffix of <code>processing_time_ms</code>.</p> <p>The program allows users to customize two parameters via command-line arguments:</p> <ul> <li>--max_display_time (or -m): This sets the maximum display time in milliseconds. The default value is 150ms.</li> <li>--display_frequency (or -f): This sets the frequency at which the terminal UI updates. The default value is 5Hz.</li> </ul> <p>By adjusting these parameters, users can tailor the display to their specific monitoring needs.</p>"},{"location":"planning/planning_debug_tools/#logging-level-updater","title":"Logging Level Updater","text":"<p>The purpose of the Logging Level Updater is to update the logging level of the planning modules via ROS 2 service. Users can easily update the logging level for debugging.</p> <pre><code>ros2 run planning_debug_tools update_logger_level.sh &lt;module-name&gt; &lt;logger-level&gt;\n</code></pre> <p><code>&lt;logger-level&gt;</code> will be <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, or <code>ERROR</code>.</p> <p></p> <p>When you have a typo of the planning module, the script will show the available modules.</p> <p></p>"},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/","title":"Doc stop reason visualizer","text":""},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/#stop_reason_visualizer","title":"stop_reason_visualizer","text":"<p>This module is to visualize stop factor quickly without selecting correct debug markers. This is supposed to use with virtual wall marker like below. </p>"},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/#how-to-use","title":"How to use","text":"<p>Run this node.</p> <pre><code>ros2 run planning_debug_tools stop_reason_visualizer_exe\n</code></pre> <p>Add stop reason debug marker from rviz.</p> <p></p> <p>Note: ros2 process can be sometimes deleted only from <code>killall stop_reason_visualizer_exe</code></p> <p>Reference</p>"},{"location":"simulator/simulator_compatibility_test/","title":"simulator_compatibility_test","text":""},{"location":"simulator/simulator_compatibility_test/#simulator_compatibility_test","title":"simulator_compatibility_test","text":""},{"location":"simulator/simulator_compatibility_test/#purpose","title":"Purpose","text":"<p>Test procedures (e.g. test codes) to check whether a certain simulator is compatible with Autoware</p>"},{"location":"simulator/simulator_compatibility_test/#overview-of-the-test-codes","title":"Overview of the test codes","text":"<p>File structure</p> <ul> <li>test_base</li> <li>test_sim_common_manual_testing</li> <li>test_morai_sim</li> </ul> <ol> <li>test_base provides shared methods for testing. Other test codes are created based on functions defined here.</li> <li>test_sim_common_manual_testing provides the most basic functions. Any simulator can be tested using codes here. However, to make these codes usable with any simulators, the codes do not include any features for test automation.</li> <li>test_morai_sim is an automated version of test_sim_common_manual_testing for MORAI SIM: Drive. Thus it includes 'MORAI SIM: Drive'-specific codes. Users of the other simulators may create similar version for their simulator of interest.</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-procedures-for-test_sim_common_manual_testing","title":"Test Procedures for test_sim_common_manual_testing","text":""},{"location":"simulator/simulator_compatibility_test/#build-process-before-test","title":"Build process before test","text":"<pre><code>source install/setup.bash\ncolcon build --packages-select simulator_compatibility_test\ncd src/universe/autoware.universe/tools/simulator_test/simulator_compatibility_test/test_sim_common_manual_testing\n</code></pre> <p>To run each test case manually</p>"},{"location":"simulator/simulator_compatibility_test/#test-case-1","title":"Test Case #1","text":"<ol> <li>Run your simulator</li> <li>Load a map and an ego vehicle for the test</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_01_control_mode_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle control mode is changed into Manual (If the simulator has a GUI for this one, it should display the ego is in Manual)</li> <li>Ego vehicle control mode is changed into Auto (If the simulator has a GUI for this one, it should display the ego is in Auto)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-2","title":"Test Case #2","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_02_change_gear_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle gear mode is changed into \"P\" (If the simulator has a GUI for this one, it should display the gear mode is in \"P\")</li> <li>Ego vehicle gear mode is changed into \"N\" (If the simulator has a GUI for this one, it should display the gear mode is in \"N\")</li> <li>Ego vehicle gear mode is changed into \"R\" (If the simulator has a GUI for this one, it should display the gear mode is in \"R\")</li> <li>Ego vehicle gear mode is changed into \"D\" (If the simulator has a GUI for this one, it should display the gear mode is in \"D\")</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-3","title":"Test Case #3","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_03_longitudinal_command_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle longitudinal velocity is greater than 10 kph (If the simulator has a GUI for this one, it should display the longitudinal velocity is greater than 10 kph)</li> <li>Ego vehicle longitudinal velocity is going below 10 kph. This is an ego vehicle initialize process to ensure the following acceleration is made by longitudinal.acceleration value (If the simulator has a GUI for this one, it should display the longitudinal velocity is less than 10 kph)</li> <li>Ego vehicle longitudinal velocity is greater than 10 kph (If the simulator has a GUI for this one, it should display the longitudinal velocity is greater than 10 kph)</li> <li>Ego vehicle longitudinal velocity is going below 10 kph. This is an ego vehicle reset process to tear down this test case.</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-4","title":"Test Case #4","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_04_lateral_command_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle steering and/or tire value is greater than 0 degree (If the simulator has a GUI for this one, it should display the steering and/or tire is greater than 0 degree)</li> <li>Ego vehicle steering and/or tire value is 0 degree. This is a reset process. (If the simulator has a GUI for this one, it should display the steering and/or tire is 0 degree)</li> <li>Ego vehicle steering and/or tire value is less than 0 degree (If the simulator has a GUI for this one, it should display the steering and/or tire is less than 0 degree)</li> <li>Ego vehicle steering and/or tire value is 0 degree. This is a reset process. (If the simulator has a GUI for this one, it should display the steering and/or tire is 0 degree)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-5","title":"Test Case #5","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_05_turn_indicators_cmd_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle left turn indicator is turned on (If the simulator has a GUI for this one, it should display the left turn indicator is turned on)</li> <li>Ego vehicle right turn indicator is turned on (If the simulator has a GUI for this one, it should display the right turn indicator is turned on)</li> <li>Ego vehicle both turn indicators are turned off. This is a reset process. (If the simulator has a GUI for this one, it should display both left and right turn indicators are turned off)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-6","title":"Test Case #6","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_06_hazard_lights_cmd_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle hazard lights are turned on (If the simulator has a GUI for this one, it should display the hazard lights are turned on or blinking)</li> <li>Ego vehicle hazard lights are turned off. This is a reset process. (If the simulator has a GUI for this one, it should display the hazard lights are turned off)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-procedures-for-test_morai_sim","title":"Test Procedures for test_morai_sim","text":""},{"location":"simulator/simulator_compatibility_test/#build-process-before-test_1","title":"Build process before test","text":"<pre><code>source install/setup.bash\ncolcon build --packages-select simulator_compatibility_test\ncd src/universe/autoware.universe/tools/simulator_test/simulator_compatibility_test/test_morai_sim\n</code></pre> <p>Detailed process</p> <p>(WIP)</p>"},{"location":"simulator/simulator_compatibility_test/#inner-workings-algorithms","title":"Inner-workings / Algorithms","text":""},{"location":"simulator/simulator_compatibility_test/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"simulator/simulator_compatibility_test/#input","title":"Input","text":"Name Type Description <code>/vehicle/status/control_mode</code> <code>autoware_vehicle_msgs::msg::ControlModeReport</code> for [Test Case #1] <code>/vehicle/status/gear_status</code> <code>autoware_vehicle_msgs::msg::GearReport</code> for [Test Case #2] <code>/vehicle/status/velocity_status</code> <code>autoware_vehicle_msgs::msg::VelocityReport</code> for [Test Case #3] <code>/vehicle/status/steering_status</code> <code>autoware_vehicle_msgs::msg::SteeringReport</code> for [Test Case #4] <code>/vehicle/status/turn_indicators_status</code> <code>autoware_vehicle_msgs::msg::TurnIndicatorsReport</code> for [Test Case #5] <code>/vehicle/status/hazard_lights_status</code> <code>autoware_vehicle_msgs::msg::HazardLightsReport</code> for [Test Case #6]"},{"location":"simulator/simulator_compatibility_test/#output","title":"Output","text":"Name Type Description <code>/control/command/control_cmd</code> <code>autoware_control_msgs/Control</code> for [Test Case #3, #4] <code>/control/command/control_mode_cmd</code> <code>autoware_vehicle_msgs/ControlModeCommand</code> for [Test Case #1] <code>/control/command/gear_cmd</code> <code>autoware_vehicle_msgs/GearCommand</code> for [Test Case #2] <code>/vehicle/status/steering_status</code> <code>autoware_vehicle_msgs/TurnIndicatorsCommand</code> for [Test Case #5] <code>/control/command/turn_indicators_cmd</code> <code>autoware_vehicle_msgs/HazardLightsCommand</code> for [Test Case #6]"},{"location":"simulator/simulator_compatibility_test/#parameters","title":"Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#node-parameters","title":"Node Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#core-parameters","title":"Core Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>None.</p>"},{"location":"system/rqt_diagnostic_graph_monitor/","title":"System diagnostic monitor","text":""},{"location":"vehicle/calibration_adapter/","title":"calibration_adapter","text":""},{"location":"vehicle/calibration_adapter/#calibration_adapter","title":"calibration_adapter","text":""},{"location":"vehicle/calibration_adapter/#purpose","title":"Purpose","text":"<p>This package relay topic to <code>Float32Stamped</code> type of \"autoware_calibration_msgs\" to generalize calibration topics.</p>"},{"location":"vehicle/calibration_adapter/#details","title":"Details","text":"<ul> <li><code>calibration_adapter_node_base</code>   This node has general calibration topics for all vehicle interface</li> </ul> <ul> <li><code>calibration_adapter</code>   This node has vehicle specific or temporary topics to calibrate and this node inherit <code>calibration_adapter_node_base</code>.</li> </ul>"},{"location":"vehicle/calibration_adapter/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>TBD.</p>"},{"location":"vehicle/parameter_estimator/","title":"ParameterEstimation","text":""},{"location":"vehicle/parameter_estimator/#parameterestimation","title":"ParameterEstimation","text":"<p>This parameter estimation node estimates a default parameters from inputs for steer offset,wheel base and gear ratio.</p> <p> </p>"},{"location":"vehicle/parameter_estimator/#io","title":"I/O","text":""},{"location":"vehicle/parameter_estimator/#input","title":"input","text":"<p>The following topics are used to estimate the parameters.</p> <ul> <li><code>/sensing/imu/imu_data</code>: used as vehicle angular velocity</li> <li><code>/vehicle/status/twist</code>: used as vehicle velocity</li> <li><code>/vehicle/status/steering</code>: used as vehicle steering angle (Only used in Steer Offset Estimator &amp; Wheel Base Estimator)</li> <li><code>/calibration/vehicle/handle_status</code>: used as vehicle handle angle (Only used in Gear Estimator)</li> <li><code>/vehicle/engage</code>: used to check the driving operation status</li> </ul>"},{"location":"vehicle/parameter_estimator/#output","title":"output","text":"<p>The following topics are the output</p> <ul> <li><code>/vehicle/status/gear_ratio</code></li> <li><code>/vehicle/status/steering_offset</code></li> <li><code>/vehicle/status/wheel_base</code></li> </ul> <p>For users, the <code>EstimationResult.msg</code> output contains the following items:</p> <ul> <li>result: Estimated result.</li> <li>result_mean: Average value of result.</li> <li>result_stddev: Standard deviation value of the estimated parameter</li> <li>absolute_error: Absolute error of the estimated parameters</li> <li>mean_absolute_error: Mean absolute error of the estimated parameters</li> <li>stddev_absolute_error: Standard Deviation of absolute error of the estimated parameters</li> </ul>"},{"location":"vehicle/parameter_estimator/#these-values-can-be-confirmed-in-plot_juggler","title":"These values can be confirmed in plot_juggler","text":"<ul> <li>To display in the plot juggler, you need to drag the result into the table, currently plot juggler cannot auto display the value</li> </ul>"},{"location":"vehicle/parameter_estimator/#how-to-run-parameter-estimator","title":"How to Run Parameter Estimator","text":"<p>Note: You need to build the Autoware beforehand.</p> <p>The following command will start the parameter estimation node.</p> <pre><code>ros2 launch parameter_estimator parameter_estimator.launch.xml vehicle_model:=lexus\n</code></pre> <ul> <li>The following arguments are using to select the estimator, default is true<ul> <li>select_gear_ratio_estimator</li> <li>select_steer_offset_estimator</li> <li>select_wheel_base_estimator</li> </ul> </li> <li>To deselect the specific estimator, you need to set estimator to false</li> <li>Example, the following command will only launch gear ratio estimator</li> </ul> <pre><code>ros2 launch parameter_estimator parameter_estimator.launch.xml vehicle_model:=lexus select_steer_offset_estimator:=false select_wheel_base_estimator:=false\n</code></pre> <p>If you want to launch with Rviz, use the following launch file. Currently unavailable</p> <pre><code># Launch parameter Estimator with the Autoware\n$ ros2 launch parameter_estimator parameter_estimator_with_simulation.launch.xml map_path:=.../kashiwanoha2/ vehicle_model:=jpntaxi sensor_model:=aip_xx1 rviz:=true\n</code></pre>"},{"location":"vehicle/parameter_estimator/#how-to-check-the-estimated-parameters","title":"How to check the estimated parameters","text":"<p>The necessary information is plotted in the plot_juggler, which displays the following information from top to bottom.</p> <ul> <li>First row: Estimation results confirmation</li> <li>Second row: error for estimation</li> </ul> <p>You need to adjust the value of <code>(valid_min_)</code> or <code>(valid_max_)</code>. according to the standard deviation to determine the validity of the data.</p>"},{"location":"vehicle/parameter_estimator/#estimation-results-confirmation","title":"Estimation results confirmation","text":"<p>Check the estimation results.</p> <ul> <li>result : parameter estimated at each step</li> <li>result_mean : Average of the parameters</li> <li>result_stddev : Standard deviation of the estimated parameters</li> </ul> <p> </p> <p>It is preferable to use the _mean for the calibration results.</p> <p>The parameters estimation starts when enough data is stored. The output value is zero until it is ready.</p>"},{"location":"vehicle/parameter_estimator/#error-for-parameters-estimation","title":"Error for parameters estimation","text":"<p>Check the statistics of the errors in the input/output data after the parameter estimation.</p> <ul> <li>absolute_error : absolute error of measured and estimated of the parameters estimation</li> <li>mean_absolute_error : Mean of the absolute error calculated in each estimation step</li> <li>stddev_absolute_error : Standard deviation of the absolute error calculated in each estimation step</li> </ul> <p> </p> <p>If these values are large, the model needs to be reconsidered.</p>"},{"location":"vehicle/parameter_estimator/#data-preprocessing","title":"Data preprocessing","text":""},{"location":"vehicle/parameter_estimator/#examine-the-results-of-processing-the-input-data","title":"Examine the results of processing the input data","text":"<p>Data that do not satisfy the following conditions are considered invalid and will not be used for estimation.</p> <ul> <li>Data variation (evaluated by standard deviation) is smaller than the threshold</li> <li>The car is not in automatic operation mode (judged from Autoware's Engage, Vehicle's Engage, etc.)</li> </ul>"},{"location":"vehicle/pitch_checker/","title":"pitch checker","text":""},{"location":"vehicle/pitch_checker/#pitch-checker","title":"pitch checker","text":"<p>The role of this node is to visualize pitch of driving route. The source of pitch is tf (<code>map-&gt;base_link</code>).</p>"},{"location":"vehicle/pitch_checker/#how-to-visualize","title":"How to visualize","text":""},{"location":"vehicle/pitch_checker/#collect-data","title":"Collect data","text":""},{"location":"vehicle/pitch_checker/#launch-data-collector-node","title":"launch data collector node","text":"<pre><code>ros2 launch pitch_checker pitch_checker.launch.xml\n</code></pre>"},{"location":"vehicle/pitch_checker/#save-file-to-data","title":"save file to data","text":"<pre><code>ros2 service call /pitch_checker/save_flag std_srvs/srv/Trigger {}\n</code></pre> <p>(The pitch data is saved at <code>&lt;YOUR WORKSPACE&gt;/install/pitch_checker/share/pitch_checker/pitch.csv</code>)</p>"},{"location":"vehicle/pitch_checker/#visualize-data","title":"Visualize data","text":"<pre><code>ros2 launch pitch_checker view_pitch.launch.xml\n</code></pre> <p>The <code>view_pitch.launch</code> loads the data stored in the default path and visualize it is as below. The pitch angle [rad] is shown on the left plot, the value of the z-coordinate [m] on the right plot.</p> <p></p>"},{"location":"vehicle/time_delay_estimator/","title":"TimeDelayEstimation","text":""},{"location":"vehicle/time_delay_estimator/#timedelayestimation","title":"TimeDelayEstimation","text":"<p>This delay estimation node estimates a time delay from inputs to outputs for accel, brake, and steer.</p> <p> </p>"},{"location":"vehicle/time_delay_estimator/#input-response","title":"Input / Response","text":"<p>The following topics are used to estimate the delay.</p> <ul> <li><code>/vehicle/raw_vehicle_cmd</code>: used as accel/brake target value</li> <li><code>/control/control_cmd</code>: used as steer target value</li> <li><code>/calibration/vehicle/accel_status</code>: used as accel observed value</li> <li><code>/calibration/vehicle/brake_status</code>: used as brake observed value</li> <li><code>/vehicle/status/steering</code>: used as steer observed value</li> <li><code>/calibration/vehicle/is_engage</code>: used to check the driving operation status</li> </ul> <p>output.</p> <p>For users, the <code>TimeDelay.msg</code> output contains the following items:</p> <ul> <li>time_delay: Estimated time delay.</li> <li>mean: Mean value of the estimated time delay</li> <li>stddev: Standard deviation of the estimated time delay</li> <li>is_valid_data: Validity determination of the current data</li> <li>first_order_model_coefficients\uff1asize 2 array of model coefficients(b,k,t)</li> <li>second_order_model_coefficients\uff1asize 2 array of model coefficients(m,b,k,t)</li> </ul> <p>In addition, the following items are output for developers.</p> <ul> <li>Mean average error of delay estimation</li> <li>Standard deviation of the mean error of delay estimation</li> </ul> <p>These values can be confirmed in rqt_multiplot, described below.</p>"},{"location":"vehicle/time_delay_estimator/#how-to-run-time-delay-estimator","title":"How to Run Time Delay Estimator","text":"<p>Note: You need to build the Autoware beforehand.</p> <p>The following command will start the delay estimation node.</p> <pre><code>ros2 launch time_delay_estimator time_delay_estimator.launch.xml is_showing_debug_graph:=true\n</code></pre> <p> </p>"},{"location":"vehicle/time_delay_estimator/#change-the-estimator-type","title":"Change the estimator type","text":"<p>You can decide the estimator_type with the following parameters</p> <ul> <li>\"cc\" : Cross Correlation</li> <li>\"ls\" : Least Squared</li> <li>\"ls2\" : Least Squared Second</li> </ul> <p>Note: Only \"cc\" Cross Correlation will display the debug graph</p>"},{"location":"vehicle/time_delay_estimator/#how-to-check-the-estimated-delay","title":"How to check the estimated delay","text":"<p>The necessary information is plotted in the rqt_multiplot, which displays the following information from top to bottom.</p> <ul> <li>First row: Input data processing results examination</li> <li>Second row: Estimation results confirmation</li> <li>Third row: The confidence level of the estimation results</li> <li>Fourth row: Input/output error after delay compensation</li> </ul>"},{"location":"vehicle/time_delay_estimator/#input-data-processing-results-examination","title":"Input data processing results examination","text":"<p>Check the input and output data. It is also used to adjust parameters of the estimation logic.</p> <ul> <li>input raw : input data</li> <li>response raw : response data</li> <li>input processed : input data after compensation (*)</li> <li>response processed : response data after compensation (*)</li> <li>data stddev : standard deviation of the data used for estimation (used to determine validity)</li> <li>is valid data : Whether the data is valid or not<ul> <li>0.0 : invalid because the standard deviation is less than the threshold (<code>*_min_stddev_threshold</code>).</li> <li>1.0 : valid because the standard deviation is greater than the threshold (<code>*_min_stddev_threshold</code>).</li> </ul> </li> </ul> <p>(*) Smoothing, normalization, and resampling are applied as preprocessing.</p> <p> </p> <p>You need to adjust the value of <code>*_min_stddev_threshold</code> according to the standard deviation to determine the validity of the data.</p>"},{"location":"vehicle/time_delay_estimator/#estimation-results-confirmation","title":"Estimation results confirmation","text":"<p>Check the estimation results.</p> <ul> <li>delay : Time delay estimated at each step</li> <li>average : Average of the time delays</li> <li>stddev : Standard deviation of the estimated delay</li> </ul> <p> </p> <p>It is preferable to use the average for the calibration results.</p> <p>The delay estimation starts when enough data is stored. The output value is zero until it is ready.</p>"},{"location":"vehicle/time_delay_estimator/#confidence-level-of-the-estimation-results","title":"Confidence level of the estimation results","text":"<p>The reliability of the estimated time delay can be analyzed by the correlation coefficient.</p> <ul> <li>correlation peak : correlation coefficient between input and output (if this value is low (about 0.7 or less), the estimation may not be successful)</li> <li>detection result : Whether the cross-correlation resulted in a good estimation or not.<ul> <li>0.00 : Invalid estimation due to low correlation (output the previous value)</li> <li>0.50 : Estimation has not started yet or received invalid data</li> <li>1.00 : Estimation has been done properly</li> </ul> </li> </ul> <p> </p>"},{"location":"vehicle/time_delay_estimator/#inputoutput-error-after-delay-compensation","title":"Input/output error after delay compensation","text":"<p>Check the statistics of the errors in the input/output data after the time delay compensation.</p> <ul> <li>mae raw : Mean absolute error of input/output after the delay compensation</li> <li>mae mean : Mean of the mean absolute error calculated in each estimation step</li> <li>mae stddev : Standard deviation of mean absolute error</li> </ul> <p> </p> <p>If these values are large, the input/output model needs to be reconsidered.</p>"},{"location":"vehicle/time_delay_estimator/#data-preprocessing","title":"Data preprocessing","text":""},{"location":"vehicle/time_delay_estimator/#examine-the-results-of-processing-the-input-data","title":"Examine the results of processing the input data","text":"<p>Data that do not satisfy the following conditions are considered invalid and will not be used for estimation.</p> <ul> <li>Data variation (evaluated by standard deviation) is smaller than the threshold</li> <li>The car is not in automatic operation mode (judged from Autoware's Engage, Vehicle's Engage, etc.)</li> </ul>"},{"location":"vehicle/time_delay_estimator/#visualization-of-delay-estimation-results","title":"Visualization of delay estimation results","text":"<p>Before running the node, you need to set the <code>is_showing_debug_info</code> parameter in the yaml file to true for a visualization. Then the internal values of accel/brake/steer/test are plotted on the python visualization tool. If the superposition of input and response is good, we can say that we have a good estimation.</p> <p> </p>"},{"location":"vehicle/time_delay_estimator/#test-wip","title":"Test WIP","text":"<p>Execute the following command to perform an estimation on the sample data. This test should be used to see the characteristics when the parameters are changed.</p> <pre><code>roslaunch time_delay_estimator test_time_delay_estimator.launch\n</code></pre>"}]}